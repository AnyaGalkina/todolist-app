{"version":3,"sources":["features/Todolists/Todolist/Task/Task.module.css","features/Todolists/Todolist/TodoList.module.css","api/todolistsAPI.ts","state/types/types.ts","api/authAPI.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","state/todolists-reducer.ts","state/tasks-reducer.tsx","state/store.ts","state/hooks.ts","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpanTitle.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TodolistsList.tsx","components/Snackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/404/404.tsx","app/App.tsx","serviceWorker.ts","app/theme.tsx","index.tsx","features/Login/Login.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","RESULT_CODES","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","payload","put","todolistId","delete","p","taskId","model","authAPI","handleServerNetworkError","error","dispatch","setAppErrorAC","message","setAppStatusAC","handleServerAppError","data","messages","length","SET_AUTH","initialState","isLoggedIn","setIsLoggedInAC","type","SET_STATUS","SET_ERROR","SET_INITIALIZED","status","isInitialized","setInitializedTC","then","res","resultCode","succeeded","finally","CHANGE_TODOLIST_TITLE","REMOVE_TODOLISTID","ADD_TODOLIST","CHANGE_FILTER","SET_TODOLISTS","SET_ENTITY_STATUS","ALL","ACTIVE","COMPLETED","v1","setEntityStatusAC","entityStatus","getTodolistsThunk","todolists","catch","removeTodolistsThunk","removeTodolistAC","addTodolistThunk","todolist","item","updateTodolistTitleThunk","changeTodolistTitleAC","REMOVE_TASK","UPDATE_TASK","ADD_TASK","SET_TASKS","SET_TASK_ENTITY_STATUS","initalState","setTaskEntityStatusAC","getTasksThunk","tasks","setTasksAC","items","removeTaskThunk","removeTaskAC","addTaskThunk","task","updateTaskThunk","getState","find","t","id","description","priority","startDate","addedDate","deadline","updateTaskAC","useAppSelector","useSelector","rootReducer","combineReducers","state","action","map","filter","newState","copeState","forEach","app","auth","store","legacy_createStore","applyMiddleware","thunk","window","useAppDispatch","useDispatch","Header","onLoginClickHandler","useCallback","isAxiosError","Box","sx","flexGrow","AppBar","position","style","backgroundColor","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","onClick","AddItemForm","React","memo","props","useState","newItemTitle","setNewItemTitle","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","disabled","maxWidth","maxHeight","minWidth","minHeight","EditableSpanTitle","editMode","setEditMode","setTitle","activateViewMode","onChangeTitle","event","onBlur","onKeyDown","autoFocus","onDoubleClick","Task","onChangeTitleHandler","newTitle","isDisabled","className","styles","Checkbox","checked","Completed","New","DeleteOutline","fontSize","TodoList","onFilterClickHandler","changeFilterAC","addTask","onChangeTodolistTitleHandler","tasksForToDoList","tasksList","useEffect","todolistTitle","DeleteOutlined","TodolistList","addTodolist","Grid","container","padding","spacing","tl","Paper","width","to","Alert","ref","elevation","ErrorSnackbars","handleClose","reason","Stack","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","PageNotFound","App","requestStatus","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","Boolean","location","hostname","match","theme","createTheme","palette","primary","main","secondary","success","mode","background","default","paper","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.12b6825f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2Pjwc\",\"taskIsDone\":\"Task_taskIsDone__2VCLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"TodoList_errorMessage__3qCNg\",\"error\":\"TodoList_error__2k7k2\",\"button\":\"TodoList_button__2UrSy\",\"todolistTitle\":\"TodoList_todolistTitle__1tRXl\"};","import axios, {AxiosResponse} from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\n    withCredentials: true,\n    headers: {\"api-key\": \"8cb31c3e-5e62-4d4f-945f-025b0014bebf\"}\n});\n\n\nexport const todolistsAPI = {\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(\"/todo-lists\");\n    },\n    createTodolist(title: string) {\n        return instance.post<\"\", AxiosResponse<CommonResType<DataType<TodolistType>>>, { title: string }>(\"/todo-lists\", {title});\n    },\n    updateTodolistTitle(payload: { todolistId: string, title: string }) {\n        return instance.put< { title: string },AxiosResponse<CommonResType>>(`/todo-lists/${payload.todolistId}`, {title: payload.title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<CommonResType>(`/todo-lists/${todolistId}`);\n    },\n    getTasks(todolistId: string) {\n        return instance.get<TaskGetResType>(`/todo-lists/${todolistId}/tasks`);\n    },\n    createTask(p: { todolistId: string, title: string }) {\n        return instance.post<CommonResType<DataType<TaskType>>>(`/todo-lists/${p.todolistId}/tasks`, {title: p.title});\n    },\n    updateTask(payload: { todolistId: string, taskId: string, model: UpdateModel }\n    ) {\n        return instance.put<CommonResType<DataType<TaskType>>>(`/todo-lists/${payload.todolistId}/tasks/${payload.taskId}`, {...payload.model});\n    },\n    deleteTask(payload: { todolistId: string, taskId: string }) {\n        return instance.delete<CommonResType>(`/todo-lists/${payload.todolistId}/tasks/${payload.taskId}`);\n    }\n}\n\n//types\nexport type TodolistType = {\n    id: string;\n    addedDate: string;\n    order: number;\n    title: string;\n}\ntype DataType<D> = {\n    item: D\n}\nexport type CommonResType<T = {}> = {\n    resultCode: number;\n    messages: string[];\n    fieldsErrors: string[];\n    data: T;\n}\nexport type TaskGetResType = {\n    items: TaskType[];\n    totalCount: number;\n    error?: string;\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress,\n    Completed,\n    Draft\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    id: string;\n    title: string;\n    description: string;\n    todoListId: string;\n    order: number;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n    addedDate: string;\n}\ntype UpdateModel = {\n    title: string;\n    description: string;\n    // completed: boolean;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n}\n\n\n","import {\n    addTodolistAC,\n    changeFilterAC,\n    changeTodolistTitleAC,\n    removeTodolistAC,\n    setEntityStatusAC,\n    setTodolists\n} from \"../todolists-reducer\";\nimport {addTaskAC, removeTaskAC, setTaskEntityStatusAC, setTasksAC, updateTaskAC} from \"../tasks-reducer\";\nimport {AppActionsType} from \"../../app/app-reducer\";\nimport {setIsLoggedInAC} from \"../../features/Login/auth-reducer\";\n\nexport type ActionType = ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof removeTodolistAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof changeFilterAC>\n    | ReturnType<typeof setTodolists>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof setTasksAC>\n    | ReturnType<typeof setEntityStatusAC>\n    | ReturnType<typeof setTaskEntityStatusAC>\n    | ReturnType<typeof setIsLoggedInAC>\n    | AppActionsType;\n\n\nexport enum RESULT_CODES {\n    succeeded = 0,\n    error = 1,\n    // bad_captcha = 2\n}\n","import {CommonResType, instance} from \"./todolistsAPI\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport const authAPI = {\n    login(payload: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<CommonResType<{ userId?: number }>>>(\"/auth/login\", payload);\n    },\n    me(){\n        return instance.get<CommonResType<MeGetType>>(\"/auth/me\");\n    },\n    logout() {\n        return instance.delete<CommonResType>(\"/auth/login\");\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string,\n    password: string,\n    rememberMe?: boolean,\n    captcha?: string\n}\n\n\ntype MeGetType = {\n    id: number\n    login: string\n    email: string\n}","import {Dispatch} from \"redux\";\nimport {AppActionsType, setAppStatusAC, setAppErrorAC} from \"../app/app-reducer\";\nimport {CommonResType} from \"../api/todolistsAPI\";\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<AppActionsType>) => {\n    dispatch(setAppErrorAC(error.message));\n    dispatch(setAppStatusAC(\"failed\"));\n}\nexport const handleServerAppError = <T>(data: CommonResType<T>, dispatch: Dispatch<AppActionsType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC(\"Some error occurred\"))\n    }\n    dispatch(setAppStatusAC(\"failed\"))\n}","import {Dispatch} from \"redux\";\nimport {ActionType, RESULT_CODES} from \"../../state/types/types\";\nimport {authAPI, LoginParamsType} from \"../../api/authAPI\";\nimport {setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport axios from \"axios\";\n\nexport const SET_AUTH = \"AUTH/SET_AUTH\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport type InitialStateType = typeof initialState;\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case SET_AUTH:\n            return {...state, isLoggedIn: action.payload.isLoggedIn}\n        default:\n            return state;\n    }\n}\n\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\n    ({type: SET_AUTH, payload: {isLoggedIn}} as const);\n\nexport const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    try {\n        const res = await authAPI.login(data);\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setIsLoggedInAC(true));\n            dispatch(setAppStatusAC(\"succeeded\"));\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            handleServerNetworkError(error, dispatch);\n        }\n    }\n}\n\nexport const logoutTC = () => async (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    try {\n        const res = await authAPI.logout();\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setIsLoggedInAC(false));\n            dispatch(setAppStatusAC(\"succeeded\"));\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            handleServerNetworkError(error, dispatch);\n        }\n    }\n\n}\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/authAPI\";\nimport {RESULT_CODES} from \"../state/types/types\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {ActionType} from \"../state/types/types\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nexport type InitialStateType = {\n    status: RequestStatusType;\n    error: string | null;\n    isInitialized: boolean\n}\n\nexport type AppActionsType =\n    ReturnType<typeof setAppErrorAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setIsInitializedAC>;\n;\n\nconst SET_STATUS = \"APP/SET_STATUS\";\nconst SET_ERROR = \"APP/SET_ERROR\";\nconst SET_INITIALIZED = \"APP/SET_INITIALIZED\";\n\nconst initialState: InitialStateType = {\n    //do we have interaction with server\n    status: \"idle\",\n    // global error text\n    error: null,\n    //is our app has already initialized\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_STATUS:\n        case SET_INITIALIZED:\n        case SET_ERROR:\n            return {...state, ...action.payload};\n        default:\n            return state;\n    }\n}\n\nexport const setAppStatusAC = (status: RequestStatusType) =>\n    ({type: SET_STATUS, payload: {status}} as const);\nexport const setAppErrorAC = (error: string | null) =>\n    ({type: SET_ERROR, payload: {error}} as const);\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n    ({type: SET_INITIALIZED, payload: {isInitialized}} as const);\n\n\nexport const setInitializedTC = () => (dispatch: Dispatch<ActionType>) => {\n    authAPI.me()\n        .then((res) => {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(setIsLoggedInAC(true));\n            }\n        })\n        .finally(() => {\n            dispatch(setIsInitializedAC(true));\n        })\n}","import {v1} from \"uuid\";\nimport {todolistsAPI, TodolistType} from \"../api/todolistsAPI\";\nimport {Dispatch} from \"redux\";\nimport {ActionType, RESULT_CODES} from \"./types/types\";\nimport {RequestStatusType, setAppStatusAC} from \"../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n\nexport const CHANGE_TODOLIST_TITLE = \"TODO_LISTS/CHANGE_TODOLIST_TITLE\"\nexport const REMOVE_TODOLISTID = \"TODO_LISTS/REMOVE_TODO_LISTS\";\nexport const ADD_TODOLIST = \"TODO_LISTS/ADD_TODOLIST\";\nexport const CHANGE_FILTER = \"TODO_LISTS/CHANGE_FILTER\";\nexport const SET_TODOLISTS = \"TODO_LISTS/SET_TODO_LISTS\";\nexport const SET_ENTITY_STATUS = \"TODO_LISTS/SET_ENTITY_STATUS\"\n\nexport const ALL = \"all\";\nexport const ACTIVE = \"active\";\nexport const COMPLETED = \"completed\";\nexport const todoListId1 = v1();\nexport const todoListId2 = v1();\n\n\nconst initialState: Array<TodolistDomainType> = [\n    // {id: todoListId1, title: \"Learn in Front End\", filter: ALL, addedDate: \"\", order: 0},\n    // {id: todoListId2, title: \"New skills\", filter: ALL, addedDate: \"\", order: 0}\n]\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case CHANGE_TODOLIST_TITLE:\n            return state.map(t => t.id === action.payload.todolistId ? {...t, title: action.payload.title} : t);\n        case CHANGE_FILTER:\n            return state.map(t => t.id === action.payload.todolistId ? {...t, filter: action.payload.filter} : t);\n        case REMOVE_TODOLISTID:\n            return state.filter(t => t.id !== action.payload.todolistId);\n        case ADD_TODOLIST:\n            return [{...action.payload.todolist, filter: ALL, entityStatus: \"idle\"}, ...state];\n        case SET_TODOLISTS:\n            return action.payload.todolists.map((t: TodolistType) => ({...t, filter: ALL, entityStatus: \"idle\"}))\n        case SET_ENTITY_STATUS:\n            return state.map(t => t.id === action.payload.todolistId ? {\n                ...t,\n                entityStatus: action.payload.entityStatus\n            } : t)\n        default:\n            return state;\n    }\n}\n\n//Action creators\nexport const removeTodolistAC = (todolistId: string) =>\n    ({type: REMOVE_TODOLISTID, payload: {todolistId}} as const);\nexport const addTodolistAC = (todolist: TodolistType) =>\n    ({type: ADD_TODOLIST, payload: {todolist}} as const);\nexport const changeTodolistTitleAC = (todolistId: string, title: string) =>\n    ({type: CHANGE_TODOLIST_TITLE, payload: {todolistId, title}} as const);\nexport const changeFilterAC = (todolistId: string, filter: FilterValuesType) =>\n    ({type: CHANGE_FILTER, payload: {todolistId, filter}} as const);\nexport const setTodolists = (todolists: TodolistType[]) =>\n    ({type: SET_TODOLISTS, payload: {todolists}} as const);\nexport const setEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) =>\n    ({type: SET_ENTITY_STATUS, payload: {todolistId, entityStatus}} as const);\n\n//Thunks\nexport const getTodolistsThunk = () => (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    todolistsAPI.getTodolist()\n        .then((res) => {\n            dispatch(setTodolists(res.data))\n            // dispatch(setAppStatusAC(\"succeeded\"))\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const removeTodolistsThunk = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    dispatch(setEntityStatusAC(todolistId, \"loading\"))\n\n    todolistsAPI.deleteTodolist(todolistId)\n\n        .then((res) => {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(removeTodolistAC(todolistId));\n                dispatch(setAppStatusAC(\"succeeded\"))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n            dispatch(setEntityStatusAC(todolistId, \"failed\"))\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch);\n            dispatch(setEntityStatusAC(todolistId, \"failed\"))\n        })\n}\n\nexport const addTodolistThunk = (title: string) => (dispatch: Dispatch<ActionType>) => {\n    todolistsAPI.createTodolist(title)\n        .then((res) => {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(addTodolistAC(res.data.data.item));\n                dispatch(setAppStatusAC(\"succeeded\"));\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const updateTodolistTitleThunk = (todolistId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\n    todolistsAPI.updateTodolistTitle({todolistId, title})\n        .then((res) => {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch((changeTodolistTitleAC(todolistId, title)));\n                dispatch(setAppStatusAC(\"succeeded\"))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}","import {ADD_TODOLIST, REMOVE_TODOLISTID, SET_TODOLISTS, setEntityStatusAC} from \"./todolists-reducer\";\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from \"../api/todolistsAPI\";\nimport {Dispatch} from \"redux\";\nimport {ActionType, RESULT_CODES} from \"./types/types\";\nimport {AppRootState} from \"./store\";\nimport {RequestStatusType, setAppStatusAC} from \"../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\nexport type TaskDomainType = TaskType & {\n    entityStatus: RequestStatusType\n}\n\nexport type TasksType = {\n    [key: string]: Array<TaskDomainType>\n}\n\nexport const REMOVE_TASK = \"TASKS/REMOVE_TASK\";\nexport const UPDATE_TASK = \"TASKS/UPDATE_TASK\";\nexport const ADD_TASK = \"TASKS/ADD_TASK\";\nexport const SET_TASKS = \"TASKS/SET_TASKS\";\nexport const SET_TASK_ENTITY_STATUS = \"TASKS/SET_TASK_ENTITY_STATUS\";\n\n\nconst initalState: TasksType = {\n    // [todoListId1]: [\n    //     {\n    //         id: v1(),\n    //         title: \"HTML&CSS\",\n    //         status: TaskStatuses.Completed,\n    //         priority: TaskPriorities.Hi,\n    //         startDate: \"\",\n    //         addedDate: \"\",\n    //         deadline: \"\",\n    //         description: \"\",\n    //         order: 0,\n    //         todoListId: todoListId1\n    //     },\n    //     {\n    //         id: v1(), title: \"JS\", status: TaskStatuses.Completed,\n    //         priority: TaskPriorities.Hi,\n    //         startDate: \"\",\n    //         addedDate: \"\",\n    //         deadline: \"\",\n    //         description: \"\",\n    //         order: 0,\n    //         todoListId: todoListId1\n    //     },\n    //     {\n    //         id: v1(), title: \"React\", status: TaskStatuses.New,\n    //         priority: TaskPriorities.Hi,\n    //         startDate: \"\",\n    //         addedDate: \"\",\n    //         deadline: \"\",\n    //         description: \"\",\n    //         order: 0,\n    //         todoListId: todoListId1\n    //\n    //     },\n    // ],\n    // [todoListId2]: [\n    //     {\n    //         id: v1(), title: \"Ride a car\",\n    //         status: TaskStatuses.New,\n    //         priority: TaskPriorities.Hi,\n    //         startDate: \"\",\n    //         addedDate: \"\",\n    //         deadline: \"\",\n    //         description: \"\",\n    //         order: 0,\n    //         todoListId: todoListId2\n    //     },\n    //     {\n    //         id: v1(), title: \"Ride a motorbike\", status: TaskStatuses.New,\n    //         priority: TaskPriorities.Low,\n    //         startDate: \"\",\n    //         addedDate: \"\",\n    //         deadline: \"\",\n    //         description: \"\",\n    //         order: 0,\n    //         todoListId: todoListId2\n    //     },\n    // ]\n}\n\nexport const tasksReducer = (state: TasksType = initalState, action: ActionType): TasksType => {\n    switch (action.type) {\n        case ADD_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: [{\n                    ...action.payload.task,\n                    entityStatus: \"idle\"\n                }, ...state[action.payload.todolistId]]\n            };\n        case SET_TASKS:\n            return {...state, [action.payload.todolistId]: action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}))};\n        case SET_TASK_ENTITY_STATUS:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t => t.id === action.payload.taskId\n                    ? {...t, entityStatus: action.payload.entityStatus} : t)\n            }\n        case ADD_TODOLIST:\n            return {[action.payload.todolist.id]: [], ...state};\n        case REMOVE_TASK :\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId)\n            };\n        case UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t => t.id === action.payload.taskId\n                    ? {...action.payload.task, entityStatus: \"idle\"} : t)\n            }\n        case REMOVE_TODOLISTID:\n            let newState = {...state};\n            delete newState[action.payload.todolistId];\n            return newState;\n        case SET_TODOLISTS:\n            let copeState = {...state}\n            action.payload.todolists.forEach(t => {\n                copeState[t.id] = [];\n            })\n            return copeState\n        default:\n            return state;\n    }\n}\n\n//Action creators\nexport const removeTaskAC = (todolistId: string, taskId: string) =>\n    ({type: REMOVE_TASK, payload: {todolistId, taskId}} as const);\nexport const updateTaskAC = (todolistId: string, taskId: string, task: TaskType) =>\n    ({type: UPDATE_TASK, payload: {todolistId, taskId, task}} as const);\nexport const addTaskAC = (todolistId: string, task: TaskType) =>\n    ({type: ADD_TASK, payload: {todolistId, task}} as const);\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\n    ({type: SET_TASKS, payload: {todolistId, tasks}} as const);\nexport const setTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType) =>\n    ({type: SET_TASK_ENTITY_STATUS, payload: {todolistId, taskId, entityStatus}} as const);\n\n\n//Thunks\nexport const getTasksThunk = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            dispatch(setTasksAC(todolistId, res.data.items))\n            dispatch(setAppStatusAC(\"succeeded\"))\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const removeTaskThunk = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"));\n    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"loading\"));\n    todolistsAPI.deleteTask({todolistId, taskId})\n        .then((res) => {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(removeTaskAC(todolistId, taskId));\n                dispatch(setAppStatusAC(\"succeeded\"));\n                dispatch(setTaskEntityStatusAC(todolistId, taskId, \"succeeded\"));\n            } else {\n                handleServerAppError(res.data, dispatch)\n                dispatch(setTaskEntityStatusAC(todolistId, taskId, \"failed\"))\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n            dispatch(setTaskEntityStatusAC(todolistId, taskId, \"failed\"))\n        })\n}\n\nexport const addTaskThunk = (payload: { todolistId: string, title: string }) => (dispatch: Dispatch<ActionType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    todolistsAPI.createTask(payload)\n        .then((res) => {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(addTaskAC(payload.todolistId, res.data.data.item));\n                dispatch(setAppStatusAC(\"succeeded\"));\n            } else {\n                handleServerAppError<{ item: TaskType }>(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch);\n        })\n}\n\ntype UpdateModuleType = {\n    title?: string;\n    description?: string;\n    completed?: boolean;\n    status?: TaskStatuses;\n    priority?: TaskPriorities;\n    startDate?: string;\n    deadline?: string;\n}\n\nexport const updateTaskThunk = (todolistId: string, taskId: string, model: UpdateModuleType) => (dispatch: Dispatch<ActionType>, getState: () => AppRootState) => {\n    debugger\n    dispatch(setAppStatusAC(\"loading\"));\n    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"loading\"));\n    const task = getState().tasks[todolistId].find(t => t.id === taskId);\n\n    if (task) {\n        todolistsAPI.updateTask({\n            todolistId, taskId, model: {\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.addedDate,\n                deadline: task.deadline,\n                ...model\n            }\n        })\n            .then((res) => {\n                if (res.data.resultCode === RESULT_CODES.succeeded) {\n                    dispatch(updateTaskAC(todolistId, taskId, res.data.data.item));\n                    dispatch(setAppStatusAC(\"succeeded\"));\n                    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"succeeded\"));\n                } else {\n                    handleServerAppError<{ item: TaskType }>(res.data, dispatch);\n                    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"failed\"));\n\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n                dispatch(setTaskEntityStatusAC(todolistId, taskId, \"failed\"));\n            })\n    }\n}","import {applyMiddleware, combineReducers, compose, legacy_createStore} from \"redux\";\nimport {todolistsReducer} from \"./todolists-reducer\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport thunk, {ThunkDispatch} from \"redux-thunk\";\nimport {ActionType} from \"./types/types\";\nimport {appReducer} from \"../app/app-reducer\";\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\n\nexport type AppRootState = ReturnType<typeof rootReducer>;\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = ThunkDispatch<AppRootState, unknown, ActionType>;\nexport const useAppSelector: TypedUseSelectorHook<AppRootState> = useSelector;\n\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\n\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk));\n// export type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootState, unknown, ActionType>;\n\n//@ts-ignore\nwindow.store = store;\n\n","import {AppDispatch, RootState} from \"./store\";\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\n\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import * as React from \"react\";\nimport {useCallback} from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport {useAppSelector} from \"../../state/store\";\nimport {useAppDispatch} from \"../../state/hooks\";\nimport {logoutTC} from \"../../features/Login/auth-reducer\";\n\nexport function Header() {\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn);\n    const dispatch = useAppDispatch();\n\n\n    const onLoginClickHandler = useCallback(() => {\n        dispatch(logoutTC());\n    }, [isLoggedIn]);\n\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <AppBar position=\"static\"\n                    style={{backgroundColor: \"#66b1d1\"}}\n            >\n                <Toolbar>\n                    <IconButton size=\"large\"\n                                edge=\"start\"\n                                color=\"inherit\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\"\n                                component=\"div\"\n                                sx={{flexGrow: 1}}>Todolist\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={onLoginClickHandler}>Logout</Button>}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}\n\nexport default Header;\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype PropsType = {\n    addItem: (title: string) => void;\n    disabled: boolean\n}\n\n\nconst AddItemForm = React.memo((props: PropsType) => {\n    const [newItemTitle, setNewItemTitle] = useState(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewItemTitle(e.currentTarget.value);\n        error && setError(null);\n    };\n\n    let addItem = () => {\n        let trimedItem = newItemTitle.trim();\n        if (trimedItem) {\n            props.addItem(newItemTitle);\n        } else {\n            setError(\"Title is required\");\n        }\n        setNewItemTitle(\"\");\n    }\n    let onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        e.key === \"Enter\" && addItem();\n    }\n\n    // let isDisabled = error !== null && true;\n\n    return (\n        <div>\n            <TextField variant=\"outlined\"\n\n                       value={newItemTitle}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyDownHandler}\n                       error={!!error}\n                       label={error ? \"Title is required\" : \"Title\"}\n                       style={{color: \"white\"}}\n                       disabled={props.disabled}\n            />\n            {/*<input*/}\n            {/*    className={`${error && styles.error}`}*/}\n            {/*    onChange={onChangeHandler}*/}\n            {/*    value={newTaskTitle}*/}\n            {/*    onKeyDown={onKeyDownHandler}/>*/}\n\n            <Button\n                variant={\"contained\"}\n                style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth: \"30px\", minHeight: \"30px\"}}\n                onClick={addItem}\n                disabled={error !== null || props.disabled && true}\n            >+</Button>\n\n            {\n                // error && <div className={styles.errorMessage}>{error}</div>\n            }\n        </div>\n    )\n        ;\n});\n\nexport default AddItemForm;","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype PropsType = {\n    title: string;\n    onChangeTitle: (title: string) => void;\n    disabled: boolean\n}\n\nfunction TextArea(props: { onBlur: () => void, onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void,\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void, autoFocus: boolean, value: string }) {\n    return null;\n}\n\nconst EditableSpanTitle: React.FC<PropsType> = React.memo((props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [title, setTitle] = useState(props.title);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.title);\n    }\n\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n    const activateViewMode = () => {\n        debugger\n        setEditMode(false);\n        props.onChangeTitle(title)\n    }\n\n    const onKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        event.key === \"Enter\" && activateViewMode();\n    }\n\n    return (\n        editMode ? <TextField\n                color={\"secondary\"}\n                variant=\"standard\"\n                value={title}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                onKeyDown={onKeyDownHandler}\n                autoFocus\n                disabled={props.disabled}\n            />\n            : <span onDoubleClick ={activateEditMode}>{props.title}</span>\n    );\n});\n\nexport default EditableSpanTitle;","import {removeTaskThunk, TaskDomainType, updateTaskThunk} from \"../../../../state/tasks-reducer\";\nimport React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport EditableSpanTitle from \"../../../../components/EditableSpan/EditableSpanTitle\";\nimport {DeleteOutline} from \"@mui/icons-material\";\nimport styles from \"./Task.module.css\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistsAPI\";\nimport {useAppDispatch} from \"../../../../state/hooks\";\n\n\ntype TaskPropsType = {\n    task: TaskDomainType;\n    todolistId: string\n}\nexport const Task = React.memo(({task, todolistId}: TaskPropsType) => {\n    const dispatch = useAppDispatch();\n\n    const onRemoveHandler = () => {\n        dispatch(removeTaskThunk(todolistId, task.id));\n    };\n\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = task.status === TaskStatuses.Completed ? TaskStatuses.New : TaskStatuses.Completed\n        dispatch(updateTaskThunk(todolistId, task.id, {status}))\n    }\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\n        dispatch(updateTaskThunk(todolistId, task.id, {title: newTitle}))\n    }, [todolistId, task.id, dispatch]);\n\n    let isDisabled = task.entityStatus === \"loading\";\n\n    return (\n        // <div  className={`${task.isDone ? styles.taskIsDone : styles.task}`}>\n        <div className={styles.task}>\n            <div>\n                <Checkbox\n                    style={{color: \"#c7f774\"}}\n                    checked={task.status === TaskStatuses.Completed}\n                    onChange={onStatusChangeHandler}\n                    disabled={isDisabled}\n                />\n                <EditableSpanTitle title={task.title} onChangeTitle={onChangeTitleHandler} disabled={isDisabled}/>\n            </div>\n            <IconButton aria-label=\"delete\" onClick={onRemoveHandler} disabled={isDisabled}>\n                <DeleteOutline style={{color: \"#6b7d84\"}} fontSize={\"small\"}/>\n            </IconButton>\n        </div>\n    )\n})\n\n","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpanTitle from \"../../../components/EditableSpan/EditableSpanTitle\";\nimport {Button, IconButton} from \"@mui/material\";\nimport {DeleteOutlined} from \"@mui/icons-material\";\nimport {addTaskThunk, getTasksThunk, TaskDomainType} from \"../../../state/tasks-reducer\";\nimport {\n    ACTIVE,\n    ALL,\n    changeFilterAC,\n    COMPLETED,\n    FilterValuesType, removeTodolistsThunk,\n    TodolistDomainType,\n    updateTodolistTitleThunk,\n} from \"../../../state/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from \"../../../state/store\";\nimport {Task} from \"./Task/Task\";\nimport styles from \"./TodoList.module.css\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolistsAPI\";\nimport {useAppDispatch} from \"../../../state/hooks\";\n\n\ntype PropsType = {\n    todolist: TodolistDomainType;\n}\n\nconst TodoList = React.memo(({todolist}: PropsType) => {\n    const {title, id: todolistId, filter, entityStatus} = todolist;\n    // const dispatch = useDispatch();\n    let tasks = useSelector<AppRootState, Array<TaskDomainType>>(state => state.tasks[todolistId]);\n    const dispatch = useAppDispatch();\n\n\n    const onFilterClickHandler = useCallback((filter: FilterValuesType) => {\n        return () => dispatch(changeFilterAC(todolistId, filter));\n    }, [dispatch, filter])\n\n    const removeTodolistHandler = () => {\n        dispatch(removeTodolistsThunk(todolistId))\n    }\n\n    const addTask = useCallback((title: string) => {\n        dispatch(addTaskThunk({todolistId, title}));\n    }, [dispatch]);\n\n    const onChangeTodolistTitleHandler = useCallback((title: string) => {\n        dispatch(updateTodolistTitleThunk(todolistId, title))\n    }, [title, dispatch])\n\n    const isDisabled = entityStatus === \"loading\";\n\n    let tasksForToDoList = tasks;\n    switch (filter) {\n        case ACTIVE:\n            tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\n            break\n        case COMPLETED:\n            tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\n            break\n    }\n\n\n    let tasksList = tasks.length ?\n        tasksForToDoList.map((t) => {\n            return (\n                <Task key={t.id} task={t} todolistId={todolistId}/>\n            )\n        }) :\n        <span>Your task list is empty</span>\n\n\n    useEffect(() => {\n        dispatch(getTasksThunk(todolistId));\n    }, []);\n\n//JSX\n    return (\n        <div>\n            <h3 className={styles.todolistTitle}>\n                <EditableSpanTitle title={title} onChangeTitle={onChangeTodolistTitleHandler} disabled={isDisabled}/>\n                <IconButton aria-label=\"delete\" onClick={removeTodolistHandler} disabled={isDisabled}>\n                    <DeleteOutlined style={{color: \"#6b7d84\"}}/>\n                </IconButton>\n            </h3>\n            <div>\n                <AddItemForm addItem={addTask} disabled={isDisabled }/>\n            </div>\n            <div>\n                {tasksList}\n            </div>\n            <div>\n                <Button\n                    variant={`${filter === ALL ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ALL)}\n                >All</Button>\n                <Button\n                    variant={`${filter === ACTIVE ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ACTIVE)}\n                    color={\"secondary\"}\n                >Active</Button>\n                <Button\n                    variant={`${filter === COMPLETED ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(COMPLETED)}\n                    size={\"small\"}\n                    color={\"success\"}\n                >Completed</Button>\n            </div>\n            <div>\n                {/*<Button title={\"undo\"} onClikCallback={props.setPrevState}/>*/}\n            </div>\n        </div>\n    )\n});\n\nexport default TodoList;\n\n","import {useSelector} from \"react-redux\";\nimport {AppRootState, useAppSelector} from \"../../state/store\";\nimport {addTodolistThunk, getTodolistsThunk, TodolistDomainType} from \"../../state/todolists-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {Grid, Paper} from \"@mui/material\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport TodoList from \"./Todolist/TodoList\";\nimport {useAppDispatch} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\n\n\nexport const TodolistList = () => {\n    const todolists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todolists);\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn);\n\n    const dispatch = useAppDispatch();\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistThunk(title))\n    }, [dispatch]);\n\n    useEffect(() => {\n        if(!isLoggedIn) {\n            return\n        }\n\n        dispatch(getTodolistsThunk());\n    }, [])\n\n\n    if(!isLoggedIn) {\n        return <Navigate to={\"/todolist-app/login\"}/>\n    }\n\n    return <>\n        <Grid container style={{padding: \"20px\"}}>\n            <AddItemForm addItem={addTodolist} disabled={false}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {todolists.map((tl: TodolistDomainType) => {\n                return (\n                    <Grid item key={tl.id}>\n                        <Paper style={{padding: \"20px\", width: \"300px\"}}>\n                            <TodoList todolist={tl}/>\n                        </Paper>\n                    </Grid>\n                )\n            })}\n        </Grid>\n    </>\n}","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {AppRootState, useAppSelector} from \"../../state/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbars = () => {\n    const error = useAppSelector(state => state.app.error );\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null));\n    };\n\n    return (\n        <Stack spacing={2} sx={{ width: '100%' }}>\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                    {error}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    );\n}\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport {FormikErrors, useFormik} from \"formik\";\nimport style from \"./Login.module.css\";\nimport {useAppSelector} from \"../../state/store\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useAppDispatch} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = () => {\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn);\n    const dispatch = useAppDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrors<any> = {};\n\n            if (!values.email) {\n                    errors.email = \"Email is required\"\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = \"Invalid email address\";\n            }\n            if (values.password.length < 2) {\n                errors.password = \"Password should be minimum 2 symbols\";            }\n            return errors\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    })\n\n    if(isLoggedIn) {\n        return <Navigate to={\"/todolist-app\"}/>\n    }\n\n    return <Grid container justifyContent={\"center\"}>\n        <Grid item justifyContent={\"center\"}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a style={{color: \"white\"}} href={\"https://social-network.samuraijs.com/\"}\n                               target={\"_blank\"}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                            <div className={style.error}>{formik.errors.email}</div>}\n                        <TextField type=\"password\" label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                            <div className={style.error}>{formik.errors.password}</div>}\n                        <FormControlLabel label={\"Remember me\"} control={\n                            <Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                                checked={formik.values.rememberMe}\n                            />}/>\n                        <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React from \"react\";\nimport Img404 from \"../../assets/images/6339698.jpg\";\nimport styles from \"./404.module.css\";\n\nconst PageNotFound = () => {\n    return (\n        <div>\n            {/*<div className={styles.img} style={{backgroundImage: `url(${Img404})`}}>*/}\n                <h1>404: PAGE NOT FOUND</h1>\n                {/*<img  className={styles.img} src={Img404}/>*/}\n            {/*</div>*/}\n\n        </div>\n    );\n};\n\nexport default PageNotFound;","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"../components/Header/Header\";\r\nimport Container from \"@mui/material/Container\";\r\nimport {AppRootState, useAppSelector} from \"../state/store\";\r\nimport {TodolistList} from \"../features/Todolists/TodolistsList\";\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {ErrorSnackbars} from \"../components/Snackbar/ErrorSnackbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RequestStatusType, setInitializedTC} from \"./app-reducer\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport PageNotFound from \"../components/404/404\";\r\nimport {useAppDispatch} from \"../state/hooks\";\r\n\r\n\r\nfunction App() {\r\n    const requestStatus = useSelector<AppRootState, RequestStatusType>(state => state.app.status);\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setInitializedTC());\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n                <CircularProgress color=\"primary\"/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {requestStatus === \"loading\" && <LinearProgress/>}\r\n            <ErrorSnackbars/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/todolist-app\"} element={<TodolistList/>}/>\r\n                    <Route path={\"/todolist-app/login\"} element={<Login/>}></Route>\r\n                    <Route path={\"/404\"} element={<PageNotFound/>}/>\r\n                    <Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme} from \"@mui/material\";\n\n\nexport const theme = createTheme({\n    palette: {\n        primary: {\n            main:  \"#9999ff\",\n        },\n        secondary: {\n            main:\n                \"#66b1d1\",\n        },\n        success: {\n            main: \"#c7f774\",\n        },\n        mode: \"dark\",\n        background: {\n            default: \"#242e41\",\n            paper: \"#2e3b52\"\n        },\n    }\n})","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { CssBaseline, ThemeProvider} from \"@mui/material\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {theme} from \"./app/theme\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,\r\n    document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__25Eh1\"};"],"sourceRoot":""}