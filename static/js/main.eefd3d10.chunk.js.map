{"version":3,"sources":["components/EditableSpan/EditableSpanTitle.module.css","components/Modal/Modal.module.css","features/Todolists/Todolist/TodoList.module.css","api/todolistsAPI.ts","state/types/types.ts","api/authAPI.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todolists/todolists-reducer.ts","features/Todolists/Todolist/Task/tasks-reducer.tsx","state/store.ts","state/hooks.ts","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpanTitle.tsx","components/Modal/Modal.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Login/selectors.tsx","features/Todolists/selectors.tsx","features/Todolists/TodolistsList.tsx","components/Snackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/404/404.tsx","app/selectors.ts","app/App.tsx","serviceWorker.ts","app/theme.tsx","index.tsx","features/Login/Login.module.css","features/Todolists/Todolist/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","RESULT_CODES","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","payload","put","todolistId","delete","p","taskId","model","authAPI","handleServerNetworkError","error","dispatch","setAppError","message","setAppStatus","status","handleServerAppError","data","messages","length","login","createAsyncThunk","thunkAPI","res","resultCode","succeeded","rejectWithValue","errors","fieldsErrors","undefined","logout","param","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","setInitialized","params","isInitialized","appReducer","ALL","ACTIVE","COMPLETED","getTodolists","todolists","removeTodolist","setEntityStatus","entityStatus","addTodolist","todolist","item","updateTodolistTitle","changeFilter","index","findIndex","tl","id","filter","map","splice","unshift","todolistsReducer","getTasks","tasks","items","removeTask","setTaskEntityStatus","addTask","task","updateTask","getState","find","t","description","priority","startDate","addedDate","deadline","forEach","tasksReducer","useAppSelector","useSelector","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","devTools","window","useAppDispatch","useDispatch","Header","onLoginClickHandler","useCallback","Box","sx","flexGrow","AppBar","position","style","backgroundColor","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","onClick","AddItemForm","React","memo","props","useState","newItemTitle","setNewItemTitle","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","disabled","maxWidth","maxHeight","minWidth","minHeight","EditableSpanTitle","editMode","setEditMode","setTitle","activateViewMode","onChangeTitle","widthInput","width","event","onBlur","onKeyDown","autoFocus","className","styles","span","top","left","transform","border","boxShadow","ModalDescription","open","handleClose","handleSave","handleOpen","appStatus","newDescription","setNewDescription","isDisabled","fontSize","Dialog","onClose","DialogTitle","Divider","bodyDescriptionBlock","DialogContent","newTitle","DialogActions","margin","Task","isModalOpen","setIsModalOpen","onChangeTitleHandler","handleModalOpen","handleModalClose","handleModalSave","Checkbox","checked","Completed","New","icons","DeleteOutline","descriptionBlock","TodoList","onFilterClickHandler","addTaskHandler","onChangeTodolistTitleHandler","tasksForToDoList","tasksList","useEffect","todolistTitle","DeleteOutlined","selectorIsLoggedIn","selectorTodolists","TodolistList","addTodolistHandler","Grid","container","padding","spacing","Paper","to","Alert","ref","elevation","ErrorSnackbars","reason","Stack","Snackbar","autoHideDuration","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","warningBlock","warningText","paddingRight","FormGroup","getFieldProps","touched","type","FormControlLabel","control","PageNotFound","selectRequestStatus","selectIsInitialized","App","requestStatus","appSelectors","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","Boolean","location","hostname","theme","createTheme","palette","primary","main","secondary","success","mode","background","default","paper","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.eefd3d10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"EditableSpanTitle_span__3L0SZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icons\":\"Modal_icons__3f5w3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"TodoList_errorMessage__3qCNg\",\"error\":\"TodoList_error__2k7k2\",\"button\":\"TodoList_button__2UrSy\",\"todolistTitle\":\"TodoList_todolistTitle__1tRXl\"};","import axios, {AxiosResponse} from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\n    withCredentials: true,\n    headers: {\"api-key\": \"8cb31c3e-5e62-4d4f-945f-025b0014bebf\"}\n});\n\n\nexport const todolistsAPI = {\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(\"/todo-lists\");\n    },\n    createTodolist(title: string) {\n        return instance.post<\"\", AxiosResponse<CommonResType<DataType<TodolistType>>>, { title: string }>(\"/todo-lists\", {title});\n    },\n    updateTodolistTitle(payload: { todolistId: string, title: string }) {\n        return instance.put< { title: string },AxiosResponse<CommonResType>>(`/todo-lists/${payload.todolistId}`, {title: payload.title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<CommonResType>(`/todo-lists/${todolistId}`);\n    },\n    getTasks(todolistId: string) {\n        return instance.get<TaskGetResType>(`/todo-lists/${todolistId}/tasks`);\n    },\n    createTask(p: { todolistId: string, title: string }) {\n        return instance.post<CommonResType<DataType<TaskType>>>(`/todo-lists/${p.todolistId}/tasks`, {title: p.title});\n    },\n    updateTask(payload: { todolistId: string, taskId: string, model: UpdateModel }\n    ) {\n        return instance.put<CommonResType<DataType<TaskType>>>(`/todo-lists/${payload.todolistId}/tasks/${payload.taskId}`, {...payload.model});\n    },\n    deleteTask(payload: { todolistId: string, taskId: string }) {\n        return instance.delete<CommonResType>(`/todo-lists/${payload.todolistId}/tasks/${payload.taskId}`);\n    }\n}\n\n//types\nexport type TodolistType = {\n    id: string;\n    addedDate: string;\n    order: number;\n    title: string;\n}\ntype DataType<D> = {\n    item: D\n}\nexport type FieldsErrorType = {field: string, error: string}\nexport type CommonResType<T = {}> = {\n    resultCode: number;\n    messages: string[];\n    // fieldsErrors: string[];\n    fieldsErrors: FieldsErrorType;\n    data: T;\n}\nexport type TaskGetResType = {\n    items: TaskType[];\n    totalCount: number;\n    error?: string;\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress,\n    Completed,\n    Draft\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    id: string;\n    title: string;\n    description: string;\n    todoListId: string;\n    order: number;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n    addedDate: string;\n}\nexport type UpdateModel = {\n    title: string;\n    description: string;\n    // completed: boolean;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n}\n\n\n","import {\n    // addTodolistAC,\n    // changeFilterAC,\n    // changeTodolistTitleAC,\n    // removeTodolistAC,\n    // setEntityStatusAC,\n    // setTodolists\n} from \"../../features/Todolists/todolists-reducer\";\n// import {addTaskAC, removeTaskAC, setTaskEntityStatusAC, setTasksAC, updateTaskAC} from \"../../features/Todolists/Todolist/Task/tasks-reducer\";\n// import {AppActionsType} from \"../../app/app-reducer\";\n// import {setIsLoggedInAC} from \"../../features/Login/auth-reducer\";\n\n// export type ActionType =\n    // ReturnType<typeof changeTodolistTitleAC>\n    // | ReturnType<typeof removeTodolistAC>\n    // | ReturnType<typeof addTodolistAC>\n    // | ReturnType<typeof changeFilterAC>\n    // | ReturnType<typeof setTodolists>\n\n    // | ReturnType<typeof removeTaskAC>\n    // | ReturnType<typeof updateTaskAC>\n    // | ReturnType<typeof addTaskAC>\n    // | ReturnType<typeof setTasksAC>\n    // | ReturnType<typeof setEntityStatusAC>\n    // | ReturnType<typeof setTaskEntityStatusAC>\n\n    // | ReturnType<typeof setIsLoggedInAC>\n    // | AppActionsType;\n\n\nexport enum RESULT_CODES {\n    succeeded = 0,\n    error = 1,\n    // bad_captcha = 2\n}\n","import {CommonResType, instance} from \"./todolistsAPI\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport const authAPI = {\n    login(payload: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<CommonResType<{ userId?: number }>>>(\"/auth/login\", payload);\n    },\n    me(){\n        return instance.get<CommonResType<MeGetType>>(\"/auth/me\");\n    },\n    logout() {\n        return instance.delete<CommonResType>(\"/auth/login\");\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string,\n    password: string,\n    rememberMe?: boolean,\n    captcha?: string\n}\n\n\ntype MeGetType = {\n    id: number\n    login: string\n    email: string\n}\n\n","import {Dispatch} from \"redux\";\nimport {setAppStatus, setAppError} from \"../app/app-reducer\";\nimport {CommonResType} from \"../api/todolistsAPI\";\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\n    dispatch(setAppError({error: error.message}));\n    dispatch(setAppStatus({status: \"failed\"}));\n}\nexport const handleServerAppError = <T>(data: CommonResType<T>, dispatch: Dispatch) => {\n    dispatch(setAppError(data.messages.length ? {error: data.messages[0]} : {error: \"Some error occurred\"}))\n    dispatch(setAppStatus({status: \"failed\"}))\n}","import {RESULT_CODES} from \"../../state/types/types\";\nimport {authAPI, LoginParamsType} from \"../../api/authAPI\";\nimport {setAppStatus} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {FieldsErrorType} from \"../../api/todolistsAPI\";\n\nexport type InitialStateType = typeof initialState;\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport const login = createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldsErrorType> } }>(\n    \"auth/login\",\n    //@ts-ignore\n    async (data, thunkAPI) => {\n        thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\n        try {\n            const res = await authAPI.login(data);\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n                // return {isLoggedIn: true};\n            } else {\n                handleServerAppError(res.data, thunkAPI.dispatch);\n                return thunkAPI.rejectWithValue({errors: res.data.messages,\n                    //@ts-ignore\n                    fieldsErrors: res.data.fieldsErrors});\n            }\n        } catch (error: any) {\n            // if (axios.isAxiosError(error)) {\n            handleServerNetworkError(error, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue({errors: [error], fieldsErrors: undefined});\n            // }\n        }\n    })\n\nexport const logout = createAsyncThunk(\"auth/logout\", async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\n    try {\n        const res = await authAPI.logout();\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue(null);\n        }\n    } catch (error: any) {\n        // if (axios.isAxiosError(error)) {\n        //     const error: AxiosError = err;\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        return thunkAPI.rejectWithValue(null);\n        // }\n    }\n})\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\n            state.isLoggedIn = action.payload.isLoggedIn\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(login.fulfilled, (state, action) => {\n            state.isLoggedIn = true\n        });\n        builder.addCase(logout.fulfilled, (state, action) => {\n            state.isLoggedIn = false\n        })\n    }\n})\n\nexport const authReducer = slice.reducer;\nexport const {setIsLoggedIn} = slice.actions;\n\n\n// export const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}));\n//     try {\n//         const res = await authAPI.login(data);\n//         if (res.data.resultCode === RESULT_CODES.succeeded) {\n//             dispatch(setIsLoggedIn({isLoggedIn: true}));\n//             dispatch(setAppStatus({status: \"succeeded\"}));\n//         } else {\n//             handleServerAppError(res.data, dispatch)\n//         }\n//     } catch (error) {\n//         if (axios.isAxiosError(error)) {\n//             handleServerNetworkError(error, dispatch);\n//         }\n//     }\n// }\n\n// export const logout = () => async (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}));\n//     try {\n//         const res = await authAPI.logout();\n//         if (res.data.resultCode === RESULT_CODES.succeeded) {\n//             dispatch(setIsLoggedIn({isLoggedIn: false}));\n//             dispatch(setAppStatus({status: \"succeeded\"}));\n//         } else {\n//             handleServerAppError(res.data, dispatch)\n//         }\n//     } catch (error) {\n//         if (axios.isAxiosError(error)) {\n//             handleServerNetworkError(error, dispatch);\n//         }\n//     }\n//\n// }\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/authAPI\";\nimport {RESULT_CODES} from \"../state/types/types\";\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\nexport type InitialStateType = typeof initialState;\n\nconst initialState = {\n    //do we have interaction with server\n    status: \"idle\" as RequestStatusType,\n    // global error text\n    error: null as string | null,\n    //is our app has already initialized\n    isInitialized: false\n}\n\n\nexport const setInitialized = createAsyncThunk(\"app/setInitialized\", async (params, thunkAPI) => {\n\n    const res = await authAPI.me()\n    try {\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\n        }\n    } finally {\n        return {isInitialized: true}\n        // thunkAPI.dispatch(setIsInitialized({isInitialized: true}));\n    }\n    // .then((res) => {\n    //     if (res.data.resultCode === RESULT_CODES.succeeded) {\n    //         thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\n    //     }\n    // })\n    // .finally(() => {\n    //     thunkAPI.dispatch(setIsInitialized({isInitialized: true}));\n    // })\n})\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState,\n    reducers: {\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        },\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        // setIsInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\n        //     state.isInitialized = action.payload.isInitialized\n        // }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(setInitialized.fulfilled, (state, action) => {\n            state.isInitialized = true\n        })\n    }\n})\n\nexport const appReducer = slice.reducer;\nexport const {setAppStatus, setAppError} = slice.actions;\n","import {todolistsAPI, TodolistType} from \"../../api/todolistsAPI\";\nimport {RESULT_CODES} from \"../../state/types/types\";\nimport {RequestStatusType, setAppStatus} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n\nexport const ALL = \"all\";\nexport const ACTIVE = \"active\";\nexport const COMPLETED = \"completed\";\n\n\nconst initialState = [] as Array<TodolistDomainType>;\n\nexport const getTodolists = createAsyncThunk(\"todolists/getTodolists\", async (params, {rejectWithValue, dispatch}) => {\n    dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.getTodolist();\n        dispatch(setAppStatus({status: \"succeeded\"}));\n        return {todolists: res.data}\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue(null);\n    }\n})\n\nexport const removeTodolist = createAsyncThunk(\"todolists/removeTodolists\", async (param: { todolistId: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatus({status: \"loading\"}))\n    dispatch(setEntityStatus({todolistId: param.todolistId, entityStatus: \"loading\"}))\n\n    try {\n        const res = await todolistsAPI.deleteTodolist(param.todolistId);\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolistId: param.todolistId};\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n        // dispatch(setEntityStatus({todolistId: param.todolistId, entityStatus: \"failed\"}));\n        // return rejectWithValue(null);\n\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        dispatch(setEntityStatus({todolistId: param.todolistId, entityStatus: \"failed\"}));\n        return rejectWithValue(null);\n    }\n});\n\n\nexport const addTodolist = createAsyncThunk(\"todolists/addTodolist\", async (param: { title: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatus({status: \"loading\"}))\n    debugger\n    try {\n        const res = await todolistsAPI.createTodolist(param.title);\n        //@ts-ignore\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolist: res.data.data.item}\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue(null);\n    }\n})\n\nexport const updateTodolistTitle = createAsyncThunk(\"todolists/updateTodolistTitle\", async (param: { todolistId: string, title: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatus({status: \"loading\"}));\n    try {\n        const res = await todolistsAPI.updateTodolistTitle({todolistId: param.todolistId, title: param.title});\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolistId: param.todolistId, title: param.title}\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue(null);\n    }\n})\n\nconst slice = createSlice({\n    name: \"todolists\",\n    initialState,\n    reducers: {\n        // removeTodolist(state, action: PayloadAction<{ todolistId: string }>) {\n        //     let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n        //     state.splice(index, 1);\n        //     //return state.filter(t => t.id !== action.payload.todolistId);\n        // },\n        // addTodolist(state, action: PayloadAction<{ todolist: TodolistType }>) {\n        //     state.unshift({...action.payload.todolist, filter: ALL, entityStatus: \"idle\"})\n        // },\n        // changeTodolistTitle(state, action: PayloadAction<{ todolistId: string, title: string }>) {\n        //     let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n        //     state[index].title = action.payload.title;\n        // },\n        changeFilter(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state[index].filter = action.payload.filter;\n        },\n        // setTodolists(state, action: PayloadAction<{ todolists: TodolistType[] }>) {\n        //     return action.payload.todolists.map(tl => ({...tl, filter: ALL, entityStatus: \"idle\"}))\n        // },\n        setEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state[index].entityStatus = action.payload.entityStatus;\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getTodolists.fulfilled, (state, action) => {\n            return action.payload.todolists.map(tl => ({...tl, filter: ALL, entityStatus: \"idle\"}));\n        });\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state.splice(index, 1);\n        });\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\n            state.unshift({...action.payload.todolist, filter: ALL, entityStatus: \"idle\"})\n        });\n        builder.addCase(updateTodolistTitle.fulfilled, (state, action) => {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state[index].title = action.payload.title;\n        });\n    }\n})\nexport const todolistsReducer = slice.reducer;\nexport const {\n    changeFilter,\n    setEntityStatus\n} = slice.actions;\n\n\n//Thunks\n// export const getTodolistsThunk = () => (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}))\n//     todolistsAPI.getTodolist()\n//         .then((res) => {\n//             dispatch(setTodolists({todolists: res.data}))\n//             // dispatch(setAppStatusAC(\"succeeded\"))\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n//\n// export const removeTodolistsThunk = (todolistId: string) => (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}))\n//     dispatch(setEntityStatus({todolistId, entityStatus: \"loading\"}))\n//\n//     todolistsAPI.deleteTodolist(todolistId)\n//\n//         .then((res) => {\n//             if (res.data.resultCode === RESULT_CODES.succeeded) {\n//                 dispatch(removeTodolist({todolistId}));\n//                 dispatch(setAppStatus({status: \"succeeded\"}))\n//             } else {\n//                 handleServerAppError(res.data, dispatch)\n//             }\n//             dispatch(setEntityStatus({todolistId, entityStatus: \"failed\"}))\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch);\n//             dispatch(setEntityStatus({todolistId, entityStatus: \"failed\"}))\n//         })\n// }\n//\n// export const addTodolistThunk = (title: string) => (dispatch: Dispatch) => {\n//     todolistsAPI.createTodolist(title)\n//         .then((res) => {\n//             if (res.data.resultCode === RESULT_CODES.succeeded) {\n//                 dispatch(addTodolist({todolist: res.data.data.item}));\n//                 dispatch(setAppStatus({status: \"succeeded\"}));\n//             } else {\n//                 handleServerAppError(res.data, dispatch)\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n//\n// export const updateTodolistTitleThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n//     todolistsAPI.updateTodolistTitle({todolistId, title})\n//         .then((res) => {\n//             if (res.data.resultCode === RESULT_CODES.succeeded) {\n//                 dispatch((changeTodolistTitle({todolistId, title: title})));\n//                 dispatch(setAppStatus({status: \"succeeded\"}))\n//             } else {\n//                 handleServerAppError(res.data, dispatch)\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }","import {addTodolist, getTodolists, removeTodolist} from \"../../todolists-reducer\";\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from \"../../../../api/todolistsAPI\";\nimport {RESULT_CODES} from \"../../../../state/types/types\";\nimport {AppRootState} from \"../../../../state/store\";\nimport {RequestStatusType, setAppStatus} from \"../../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type TaskDomainType = TaskType & {\n    entityStatus: RequestStatusType\n}\n\nexport type UpdateModuleType = {\n    title?: string;\n    description?: string;\n    completed?: boolean;\n    status?: TaskStatuses;\n    priority?: TaskPriorities;\n    startDate?: string;\n    deadline?: string;\n}\n\nexport type TasksType = {\n    [key: string]: Array<TaskDomainType>\n}\n\nconst initialState: TasksType = {}\n\n\nexport const getTasks = createAsyncThunk(\"tasks/getTasks\", async (todolistId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.getTasks(todolistId)\n\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\n        return {todolistId, tasks: res.data.items}\n    } catch (error: any) {\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        return thunkAPI.rejectWithValue(null);\n    }\n})\n\nexport const removeTask = createAsyncThunk(\"tasks/removeTask\", async (param: { todolistId: string, taskId: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\n    thunkAPI.dispatch(setTaskEntityStatus({\n        todolistId: param.todolistId,\n        taskId: param.taskId,\n        entityStatus: \"loading\"\n    }));\n    try {\n        const res = await todolistsAPI.deleteTask({todolistId: param.todolistId, taskId: param.taskId})\n\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n            thunkAPI.dispatch(setTaskEntityStatus({\n                todolistId: param.todolistId,\n                taskId: param.taskId,\n                entityStatus: \"succeeded\"\n            }));\n            return {todolistId: param.todolistId, taskId: param.taskId};\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch);\n            thunkAPI.dispatch(setTaskEntityStatus({\n                todolistId: param.todolistId,\n                taskId: param.taskId,\n                entityStatus: \"failed\"\n            }));\n            return thunkAPI.rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        thunkAPI.dispatch(setTaskEntityStatus({\n            todolistId: param.todolistId,\n            taskId: param.taskId,\n            entityStatus: \"failed\"\n        }));\n        return thunkAPI.rejectWithValue(null);\n    }\n})\n\n\nexport const addTask = createAsyncThunk(\"tasks/addTask\", async (param: { todolistId: string, title: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.createTask(param);\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolistId: param.todolistId, task: res.data.data.item}\n        } else {\n            handleServerAppError<{ item: TaskType }>(res.data, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        return thunkAPI.rejectWithValue(null);\n    }\n})\n\n\nexport const updateTask = createAsyncThunk(\"tasks/updateTask\", async (param: {\n    todolistId: string,\n    taskId: string,\n    model: UpdateModuleType\n}, {dispatch, rejectWithValue, getState}) => {\n\n    dispatch(setAppStatus({status: \"loading\"}));\n    dispatch(setTaskEntityStatus({todolistId: param.todolistId, taskId: param.taskId, entityStatus: \"loading\"}));\n    const state = getState() as AppRootState;\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\n    debugger\n    if (task) {\n        const res = await todolistsAPI.updateTask({\n            todolistId: param.todolistId, taskId: param.taskId, model: {\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.addedDate,\n                deadline: task.deadline,\n                ...param.model\n            }\n        })\n        try {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(setAppStatus({status: \"succeeded\"}));\n                dispatch(setTaskEntityStatus({\n                    todolistId: param.todolistId,\n                    taskId: param.taskId,\n                    entityStatus: \"succeeded\"\n                }));\n                return {todolistId: param.todolistId, taskId: param.taskId, task: res.data.data.item};\n            } else {\n                handleServerAppError<{ item: TaskType }>(res.data, dispatch);\n                dispatch(setTaskEntityStatus({\n                    todolistId: param.todolistId,\n                    taskId: param.taskId,\n                    entityStatus: \"failed\"\n                }));\n                return rejectWithValue(null);\n            }\n        } catch (error: any) {\n            handleServerNetworkError(error, dispatch);\n            dispatch(setTaskEntityStatus({todolistId: param.todolistId, taskId: param.taskId, entityStatus: \"failed\"}));\n            return rejectWithValue(null);\n        }\n    }\n    return rejectWithValue(null);\n\n})\n\nconst slice = createSlice({\n    name: \"tasks\",\n    initialState,\n    reducers: {\n        // removeTask(state, action: PayloadAction<{ todolistId: string, taskId: string }>) {\n        //     debugger\n        //     let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n        //     if (index > -1) {\n        //         state[action.payload.todolistId].splice(index, 1);\n        //     }\n        // },\n        // updateTask(state, action: PayloadAction<{ todolistId: string, taskId: string, task: TaskType }>) {\n        //     let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n        //     if (index > -1) {\n        //         state[action.payload.todolistId][index] = {...action.payload.task, entityStatus: \"idle\"};\n        //     }\n        // },\n        // addTask(state, action: PayloadAction<{ todolistId: string, task: TaskType }>) {\n        //     state[action.payload.todolistId].unshift({...action.payload.task, entityStatus: \"idle\"});\n        // },\n        // setTasks(state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) {\n        //     state[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}));\n        // },\n        setTaskEntityStatus(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\n            let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                state[action.payload.todolistId][index].entityStatus = action.payload.entityStatus;\n            }\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\n            state[action.payload.todolist.id] = []\n        });\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\n            delete state[action.payload.todolistId]\n        });\n        builder.addCase(getTodolists.fulfilled, (state, action) => {\n            action.payload.todolists.forEach(t => {\n                state[t.id] = [];\n            })\n        });\n        builder.addCase(getTasks.fulfilled, (state, action) => {\n            state[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}));\n        });\n        builder.addCase(removeTask.fulfilled, (state, action) => {\n            let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                state[action.payload.todolistId].splice(index, 1);\n            }\n        });\n        builder.addCase(addTask.fulfilled, (state, action) => {\n            state[action.payload.todolistId].unshift({...action.payload.task, entityStatus: \"idle\"});\n        });\n        builder.addCase(updateTask.fulfilled, (state, action) => {\n            let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                state[action.payload.todolistId][index] = {...action.payload.task, entityStatus: \"idle\"};\n            }\n        });\n    }\n});\n\nexport const tasksReducer = slice.reducer;\nexport const {setTaskEntityStatus} = slice.actions;\n\n\n//Thunks\n// export const getTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}))\n//     todolistsAPI.getTasks(todolistId)\n//         .then((res) => {\n//             dispatch(setTasks({todolistId, tasks: res.data.items}))\n//             dispatch(setAppStatus({status: \"succeeded\"}))\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n\n\n// export const removeTaskThunk = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}));\n//     dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"loading\"}));\n//     todolistsAPI.deleteTask({todolistId, taskId})\n//         .then((res) => {\n//             if (res.data.resultCode === RESULT_CODES.succeeded) {\n//                 dispatch(removeTask({todolistId, taskId}));\n//                 dispatch(setAppStatus({status: \"succeeded\"}));\n//                 dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"succeeded\"}));\n//             } else {\n//                 handleServerAppError(res.data, dispatch)\n//                 dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"failed\"}))\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//             dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"failed\"}))\n//         })\n// }\n\n// export const addTaskThunk = (payload: { todolistId: string, title: string }) => (dispatch: Dispatch) => {\n//     dispatch(setAppStatus({status: \"loading\"}))\n//     todolistsAPI.createTask(payload)\n//         .then((res) => {\n//             if (res.data.resultCode === RESULT_CODES.succeeded) {\n//                 dispatch(addTask({todolistId: payload.todolistId, task: res.data.data.item}));\n//                 dispatch(setAppStatus({status: \"succeeded\"}));\n//             } else {\n//                 handleServerAppError<{ item: TaskType }>(res.data, dispatch);\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch);\n//         })\n// }\n\n\n//\n// export const updateTaskThunk = (todolistId: string, taskId: string, model: UpdateModuleType) => (dispatch: Dispatch, getState: () => AppRootState) => {\n//     debugger\n//     dispatch(setAppStatus({status: \"loading\"}));\n//     dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"loading\"}));\n//     const task = getState().tasks[todolistId].find(t => t.id === taskId);\n//\n//     if (task) {\n//         todolistsAPI.updateTask({\n//             todolistId, taskId, model: {\n//                 title: task.title,\n//                 description: task.description,\n//                 status: task.status,\n//                 priority: task.priority,\n//                 startDate: task.addedDate,\n//                 deadline: task.deadline,\n//                 ...model\n//             }\n//         })\n//             .then((res) => {\n//                 if (res.data.resultCode === RESULT_CODES.succeeded) {\n//                     dispatch(updateTask({todolistId, taskId, task: res.data.data.item}));\n//                     dispatch(setAppStatus({status: \"succeeded\"}));\n//                     dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"succeeded\"}));\n//                 } else {\n//                     handleServerAppError<{ item: TaskType }>(res.data, dispatch);\n//                     dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"failed\"}));\n//\n//                 }\n//             })\n//             .catch((error) => {\n//                 handleServerNetworkError(error, dispatch);\n//                 dispatch(setTaskEntityStatus({todolistId, taskId, entityStatus: \"failed\"}));\n//             })\n//     }\n// }","import {applyMiddleware, combineReducers, compose, legacy_createStore} from \"redux\";\nimport {todolistsReducer} from \"../features/Todolists/todolists-reducer\";\nimport {tasksReducer} from \"../features/Todolists/Todolist/Task/tasks-reducer\";\nimport thunk, {ThunkDispatch} from \"redux-thunk\";\n// import {ActionType} from \"./types/types\";\nimport {appReducer} from \"../app/app-reducer\";\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\nexport type AppRootState = ReturnType<typeof rootReducer>;\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = ThunkDispatch<AppRootState, unknown, any>;\nexport const useAppSelector: TypedUseSelectorHook<AppRootState> = useSelector;\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\n    devTools: true\n    }\n)\n\n\n\n// export type AppThunkType<ReturnType = void> =\n// ThunkAction<ReturnType, AppRootState, unknown, ActionType>;\n\n//@ts-ignore\nwindow.store = store;\n\n","import {AppDispatch, AppRootState, RootState} from \"./store\";\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\n// import {ActionType} from \"./types/types\";\n\n\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import * as React from \"react\";\nimport {useCallback} from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport {useAppSelector} from \"../../state/store\";\nimport {useAppDispatch} from \"../../state/hooks\";\nimport {logout} from \"../../features/Login/auth-reducer\";\n\nexport function Header() {\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn);\n    const dispatch = useAppDispatch();\n\n\n    const onLoginClickHandler = useCallback(() => {\n        dispatch(logout());\n    }, [isLoggedIn]);\n\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <AppBar position=\"static\"\n                    style={{backgroundColor: \"#66b1d1\"}}\n            >\n                <Toolbar>\n                    <IconButton size=\"large\"\n                                edge=\"start\"\n                                color=\"inherit\"\n                                aria-label=\"menu\"\n                                sx={{mr: 2}}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\"\n                                component=\"div\"\n                                sx={{flexGrow: 1}}>Todolist\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={onLoginClickHandler}>Logout</Button>}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}\n\nexport default Header;\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype PropsType = {\n    addItem: (title: string) => void;\n    disabled: boolean\n}\n\n\nconst AddItemForm = React.memo((props: PropsType) => {\n    const [newItemTitle, setNewItemTitle] = useState(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewItemTitle(e.currentTarget.value);\n        error && setError(null);\n    };\n\n    let addItem = () => {\n        let trimedItem = newItemTitle.trim();\n        if (trimedItem) {\n            props.addItem(newItemTitle);\n        } else {\n            setError(\"Title is required\");\n        }\n        setNewItemTitle(\"\");\n    }\n    let onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        e.key === \"Enter\" && addItem();\n    }\n\n    // let isDisabled = error !== null && true;\n\n    return (\n        <div>\n            <TextField variant=\"outlined\"\n\n                       value={newItemTitle}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyDownHandler}\n                       error={!!error}\n                       label={error ? \"Title is required\" : \"Title\"}\n                       style={{color: \"white\"}}\n                       disabled={props.disabled}\n            />\n            {/*<input*/}\n            {/*    className={`${error && styles.error}`}*/}\n            {/*    onChange={onChangeHandler}*/}\n            {/*    value={newTaskTitle}*/}\n            {/*    onKeyDown={onKeyDownHandler}/>*/}\n\n            <Button\n                variant={\"contained\"}\n                style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth: \"30px\", minHeight: \"30px\"}}\n                onClick={addItem}\n                disabled={error !== null || props.disabled && true}\n            >+</Button>\n\n            {\n                // error && <div className={styles.errorMessage}>{error}</div>\n            }\n        </div>\n    )\n        ;\n});\n\nexport default AddItemForm;","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\nimport {TextField} from \"@mui/material\";\nimport styles from \"./EditableSpanTitle.module.css\";\n\ntype PropsType = {\n    title: string;\n    onChangeTitle: (title: string) => void;\n    disabled: boolean;\n    widthInput?: string;\n}\n\n\nconst EditableSpanTitle: React.FC<PropsType> = React.memo((props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [title, setTitle] = useState(props.title);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.title);\n    }\n\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n    const activateViewMode = () => {\n        debugger\n        setEditMode(false);\n        props.onChangeTitle(title)\n    }\n\n    const onKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        event.key === \"Enter\" && activateViewMode();\n    }\n\n    return (\n        editMode ? <TextField\n                style = {props.widthInput ? {width: props.widthInput} : {}}\n                color={\"secondary\"}\n                variant=\"standard\"\n                value={title}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                onKeyDown={onKeyDownHandler}\n                autoFocus\n                disabled={props.disabled}\n            />\n            : <span className={styles.span} onClick ={activateEditMode}>{props.title}</span>\n    );\n});\n\nexport default EditableSpanTitle;","import React, {memo, useState} from \"react\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Divider, IconButton} from \"@mui/material\";\nimport EditableSpanTitle from \"../EditableSpan/EditableSpanTitle\";\nimport {UpdateModuleType} from \"../../features/Todolists/Todolist/Task/tasks-reducer\";\nimport {useAppSelector} from \"../../state/store\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport styles from \"./Modal.module.css\";\n\n\ntype PropsType = {\n    open: boolean;\n    description: string;\n    title: string;\n    handleSave: (model: UpdateModuleType) => void;\n    handleClose: () => void;\n    handleOpen: () => void;\n}\n\nconst style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"100%\",\n    minHeight: \"100vh\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n}\n\nexport const ModalDescription = memo(({open, description, handleClose, title, handleSave, handleOpen}: PropsType) => {\n    const appStatus = useAppSelector(state => state.app.status);\n\n    const [newDescription, setNewDescription] = useState(description);\n\n    const onChangeDescriptionHandler = (newTitle: string) => {\n        setNewDescription(newTitle)\n    }\n\n    const onSaveClickHandler = () => {\n        handleSave({description: newDescription});\n    }\n\n    const isDisabled = appStatus === \"loading\";\n\n    return (\n        <div>\n            <IconButton onClick={handleOpen} disabled={isDisabled}>\n                <AssignmentIcon style={{color: \"#6b7d84\"}} fontSize={\"small\"}/>\n            </IconButton>\n            <Dialog sx={style} open={open} onClose={handleClose}>\n                <DialogTitle>{title}</DialogTitle>\n                <Divider/>\n\n                <div className={styles.bodyDescriptionBlock}>\n                    <DialogContent style={{maxWidth: \"500px\"}}>\n                        {/*<TaskImage newDescription={newDescription} setNewDescription={setNewDescription} isDisabled={isDisabled}/>*/}\n                        <EditableSpanTitle\n                            widthInput={\"350px\"}\n                            title={newDescription ? newDescription : \"Click on text to add new description\"}\n                            onChangeTitle={onChangeDescriptionHandler}\n                            disabled={isDisabled}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            style={{margin: 15}}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"success\"\n                            onClick={onSaveClickHandler}\n                            disabled={isDisabled}\n                            autoFocus>Save\n                        </Button>\n                        <Button\n                            style={{margin: 15}}\n                            size=\"small\"\n                            color=\"success\"\n                            variant=\"outlined\"\n                            onClick={handleClose}\n                            disabled={isDisabled}>Close\n                        </Button>\n                    </DialogActions>\n                </div>\n            </Dialog>\n        </div>\n    );\n});","import {removeTask, TaskDomainType, UpdateModuleType, updateTask} from './tasks-reducer';\nimport React, {ChangeEvent, useCallback, useState} from 'react';\nimport {Checkbox, IconButton} from '@mui/material';\nimport EditableSpanTitle from '../../../../components/EditableSpan/EditableSpanTitle';\nimport {DeleteOutline} from '@mui/icons-material';\nimport styles from './Task.module.css';\nimport {TaskStatuses} from '../../../../api/todolistsAPI';\nimport {useAppDispatch} from '../../../../state/hooks';\nimport {ModalDescription} from '../../../../components/Modal/Modal';\n\ntype TaskPropsType = {\n    task: TaskDomainType;\n    todolistId: string\n}\nexport const Task = React.memo(({task, todolistId}: TaskPropsType) => {\n    const dispatch = useAppDispatch();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const onRemoveHandler = () => {\n        dispatch(removeTask({todolistId, taskId: task.id}));\n    };\n\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = task.status === TaskStatuses.Completed ? TaskStatuses.New : TaskStatuses.Completed\n        dispatch(updateTask({todolistId, taskId: task.id, model: {status}}))\n    }\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\n        dispatch(updateTask({todolistId, taskId: task.id, model: {title: newTitle}}))\n    }, [todolistId, task.id, dispatch]);\n\n    const handleModalOpen = useCallback(() => {\n        setIsModalOpen(true);\n    }, [isModalOpen, dispatch]);\n\n    const handleModalClose = useCallback(() => {\n        setIsModalOpen(false);\n    }, [isModalOpen, dispatch]);\n\n    const handleModalSave = useCallback((model: UpdateModuleType) => {\n        debugger\n        dispatch(updateTask({todolistId, taskId: task.id, model}));\n        setIsModalOpen(false);\n    }, [isModalOpen, task.id, todolistId, task.description, dispatch]);\n\n    let isDisabled = task.entityStatus === 'loading';\n\n    return (\n        // <div  className={`${task.isDone ? styles.taskIsDone : styles.task}`}>\n        <div>\n            <div className={styles.task}>\n                <div>\n                    <Checkbox\n                        style={{color: '#c7f774'}}\n                        checked={task.status === TaskStatuses.Completed}\n                        onChange={onStatusChangeHandler}\n                        disabled={isDisabled}\n                    />\n                    <EditableSpanTitle title={task.title} onChangeTitle={onChangeTitleHandler} disabled={isDisabled}/>\n                </div>\n                <div className={styles.icons}>\n                    <ModalDescription open={isModalOpen}\n                                      description={task.description}\n                                      title={task.title}\n                                      handleSave={handleModalSave}\n                                      handleClose={handleModalClose}\n                                      handleOpen={handleModalOpen}\n                    />\n                    <IconButton onClick={onRemoveHandler} disabled={isDisabled}>\n                        <DeleteOutline style={{color: '#6b7d84'}} fontSize={'small'}/>\n                    </IconButton>\n                </div>\n            </div>\n            <div className={styles.descriptionBlock}>\n                {task.description}\n            </div>\n        </div>\n    )\n})\n\n","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpanTitle from \"../../../components/EditableSpan/EditableSpanTitle\";\nimport {Button, IconButton} from \"@mui/material\";\nimport {DeleteOutlined} from \"@mui/icons-material\";\nimport {addTask, getTasks, TaskDomainType} from \"./Task/tasks-reducer\";\nimport {\n    ACTIVE,\n    ALL,\n    changeFilter,\n    COMPLETED,\n    FilterValuesType,\n    removeTodolist,\n    TodolistDomainType,\n    updateTodolistTitle,\n} from \"../todolists-reducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootState} from \"../../../state/store\";\nimport {Task} from \"./Task/Task\";\nimport styles from \"./TodoList.module.css\";\nimport {TaskStatuses} from \"../../../api/todolistsAPI\";\nimport {useAppDispatch} from \"../../../state/hooks\";\n\n\ntype PropsType = {\n    todolist: TodolistDomainType;\n}\n\nconst TodoList = React.memo(({todolist}: PropsType) => {\n    const {title, id: todolistId, filter, entityStatus} = todolist;\n    // const dispatch = useDispatch();\n    let tasks = useSelector<AppRootState, Array<TaskDomainType>>(state => state.tasks[todolistId]);\n    const dispatch = useAppDispatch();\n\n\n    const onFilterClickHandler = useCallback((filter: FilterValuesType) => {\n        return () => dispatch(changeFilter({todolistId, filter}));\n    }, [dispatch, filter])\n\n    const removeTodolistHandler = () => {\n        dispatch(removeTodolist({todolistId}))\n    }\n    const addTaskHandler = useCallback((title: string) => {\n        dispatch(addTask({todolistId, title}));\n    }, [dispatch]);\n\n    const onChangeTodolistTitleHandler = useCallback((title: string) => {\n        dispatch(updateTodolistTitle({todolistId, title}))\n    }, [title, dispatch])\n\n    const isDisabled = entityStatus === \"loading\";\n\n    let tasksForToDoList = tasks;\n    switch (filter) {\n        case ACTIVE:\n            tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\n            break\n        case COMPLETED:\n            tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\n            break\n    }\n\n\n    let tasksList = tasks.length ?\n        tasksForToDoList.map((t) => {\n            return (\n                <Task key={t.id} task={t} todolistId={todolistId}/>\n            )\n        }) :\n        <span>Your task list is empty</span>\n\n\n    useEffect(() => {\n        dispatch(getTasks(todolistId));\n    }, []);\n\n//JSX\n    return (\n        <div>\n            <h3 className={styles.todolistTitle}>\n                <EditableSpanTitle title={title} onChangeTitle={onChangeTodolistTitleHandler} disabled={isDisabled}/>\n                <IconButton aria-label=\"delete\" onClick={removeTodolistHandler} disabled={isDisabled}>\n                    <DeleteOutlined style={{color: \"#6b7d84\"}}/>\n                </IconButton>\n            </h3>\n            <div>\n                <AddItemForm addItem={addTaskHandler} disabled={isDisabled }/>\n            </div>\n            <div>\n                {tasksList}\n            </div>\n            <div>\n                <Button\n                    variant={`${filter === ALL ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ALL)}\n                >All</Button>\n                <Button\n                    variant={`${filter === ACTIVE ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ACTIVE)}\n                    color={\"secondary\"}\n                >Active</Button>\n                <Button\n                    variant={`${filter === COMPLETED ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(COMPLETED)}\n                    size={\"small\"}\n                    color={\"success\"}\n                >Completed</Button>\n            </div>\n            <div>\n                {/*<Button title={\"undo\"} onClikCallback={props.setPrevState}/>*/}\n            </div>\n        </div>\n    )\n});\n\nexport default TodoList;\n\n","import {AppRootState} from '../../state/store';\n\nexport const selectorIsLoggedIn = (state: AppRootState) => state.auth.isLoggedIn;\n","import {AppRootState} from '../../state/store';\n\nexport const selectorTodolists = (state: AppRootState) => state.todolists;\n","import {useSelector} from \"react-redux\";\nimport {addTodolist, getTodolists, TodolistDomainType} from \"./todolists-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {Grid, Paper} from \"@mui/material\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport TodoList from \"./Todolist/TodoList\";\nimport {useAppDispatch} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\nimport {selectorIsLoggedIn} from '../Login';\nimport {selectorTodolists} from './';\n\n\nexport const TodolistList = () => {\n    const todolists = useSelector(selectorTodolists);\n    const isLoggedIn = useSelector(selectorIsLoggedIn);\n\n    const dispatch = useAppDispatch();\n\n    const addTodolistHandler = useCallback((title: string) => {\n        dispatch(addTodolist({title}))\n    }, [dispatch]);\n\n    useEffect(() => {\n        if(!isLoggedIn) {\n            return\n        }\n\n        dispatch(getTodolists());\n    }, [])\n\n\n    if(!isLoggedIn) {\n        return <Navigate to={\"/todolist-app/login\"}/>\n    }\n\n    return <>\n        <Grid container style={{padding: \"20px\"}}>\n            <AddItemForm addItem={addTodolistHandler} disabled={false}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {todolists.map((tl: TodolistDomainType) => {\n                return (\n                    <Grid item key={tl.id}>\n                        <Paper style={{padding: \"20px\", width: \"300px\"}}>\n                            <TodoList todolist={tl}/>\n                        </Paper>\n                    </Grid>\n                )\n            })}\n        </Grid>\n    </>\n}","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {AppRootState, useAppSelector} from \"../../state/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setAppError} from \"../../app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbars = () => {\n    const error = useAppSelector(state => state.app.error );\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppError({error: null}));\n    };\n\n    return (\n        <Stack spacing={2} sx={{ width: '100%' }}>\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                    {error}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    );\n}\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport {FormikErrors, FormikHelpers, useFormik} from \"formik\";\nimport style from \"./Login.module.css\";\nimport {login} from \"./auth-reducer\";\nimport {useAppDispatch} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\nimport {useSelector} from 'react-redux';\nimport { selectorIsLoggedIn } from \".\";\nimport WarningIcon from '@mui/icons-material/Warning';\n\ntype FormikValuesType = {\n    email: string;\n    password: string;\n    rememberMe: boolean;\n}\n\nexport const Login = () => {\n    const dispatch = useAppDispatch();\n\n    const isLoggedIn = useSelector(selectorIsLoggedIn);\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrors<any> = {};\n\n            if (!values.email) {\n                errors.email = \"Email is required\"\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = \"Invalid email address\";\n            }\n            if (values.password.length < 2) {\n                errors.password = \"Password should be minimum 2 symbols\";\n            }\n            return errors\n        },\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\n            const res = await dispatch(login(values));\n            if (login.rejected.match(res)) {\n                //@ts-ignore\n                if (res.payload?.fieldsErrors?.length) {\n                    //@ts-ignore\n                    const error = res.payload.fieldsErrors[0];\n                    formikHelpers.setFieldError(error.field, error.error);\n                }\n            }\n            formik.resetForm();\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={\"/todolist-app\"}/>\n    }\n\n    return <Grid container justifyContent={\"center\"}>\n        <Grid item justifyContent={\"center\"}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a style={{color: \"white\"}} href={\"https://social-network.samuraijs.com/\"}\n                               target={\"_blank\"}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n\n                        <div className={style.warningBlock}>\n                            <div className={style.warningText}>\n                                <WarningIcon fontSize=\"large\" style={{color: 'orange', paddingRight: '10px'}}/>\n                                If you have some issue with log in using Safari, please follow instructions:\n                            </div>\n                            <div>\n                                Click the Safari menu, you will see the Preferences item - click on it. Then click the Privacy item\n                                to see privacy related options. You will see the Website tracking checkbox. Click on Prevent\n                                cross-site tracking.\n                            </div>\n                        </div>\n                    </FormLabel>\n                    <FormGroup style={{width: \"340px\"}}>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                            <div className={style.error}>{formik.errors.email}</div>}\n                        <TextField type=\"password\" label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                            <div className={style.error}>{formik.errors.password}</div>}\n                        <FormControlLabel label={\"Remember me\"} control={\n                            <Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                                checked={formik.values.rememberMe}\n                            />}/>\n                        <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React from \"react\";\nimport Img404 from \"../../assets/images/6339698.jpg\";\nimport styles from \"./404.module.css\";\n\nconst PageNotFound = () => {\n    return (\n        <div>\n            {/*<div className={styles.img} style={{backgroundImage: `url(${Img404})`}}>*/}\n                <h1>404: PAGE NOT FOUND</h1>\n                {/*<img  className={styles.img} src={Img404}/>*/}\n            {/*</div>*/}\n\n        </div>\n    );\n};\n\nexport default PageNotFound;","import {AppRootState} from '../state/store';\n\nexport const selectRequestStatus = (state: AppRootState) => state.app.status;\nexport const selectIsInitialized = (state: AppRootState) => state.app.isInitialized;\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"../components/Header/Header\";\r\nimport Container from \"@mui/material/Container\";\r\nimport {TodolistList} from \"../features/Todolists/TodolistsList\";\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {ErrorSnackbars} from \"../components/Snackbar/ErrorSnackbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {setInitialized} from \"./app-reducer\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport PageNotFound from \"../components/404/404\";\r\nimport {useAppDispatch} from \"../state/hooks\";\r\nimport {appSelectors} from './';\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const requestStatus = useSelector(appSelectors.selectRequestStatus);\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized);\r\n\r\n    useEffect(() => {\r\n        dispatch(setInitialized());\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n                <CircularProgress color=\"primary\"/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {requestStatus === \"loading\" && <LinearProgress/>}\r\n            <ErrorSnackbars/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/todolist-app\"} element={<TodolistList/>}/>\r\n                    <Route path={\"/todolist-app/login\"} element={<Login/>}></Route>\r\n                    <Route path={\"/404\"} element={<PageNotFound/>}/>\r\n                    <Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme} from \"@mui/material\";\n\n\nexport const theme = createTheme({\n    palette: {\n        primary: {\n            main:  \"#9999ff\",\n        },\n        secondary: {\n            main:\n                \"#66b1d1\",\n        },\n        success: {\n            main: \"#c7f774\",\n        },\n        mode: \"dark\",\n        background: {\n            default: \"#242e41\",\n            paper: \"#2e3b52\"\n        },\n    }\n})","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { CssBaseline, ThemeProvider} from \"@mui/material\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {theme} from \"./app/theme\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,\r\n    document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__25Eh1\",\"warningBlock\":\"Login_warningBlock__QIBvy\",\"warningText\":\"Login_warningText__QFN97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2Pjwc\",\"taskIsDone\":\"Task_taskIsDone__2VCLH\",\"icons\":\"Task_icons__36xxZ\",\"descriptionBlock\":\"Task_descriptionBlock__1ST9D\"};"],"sourceRoot":""}