{"version":3,"sources":["components/AddItemForm/AddItemForm.module.css","components/EditableSpan/EditableSpanTitle.module.css","components/Modal/Modal.module.css","features/Todolists/Todolist/TodoList.module.css","api/todolistsAPI.ts","app/selectors.ts","app/theme.tsx","api/authAPI.ts","state/types/types.ts","utils/error-utils.ts","features/Todolists/todolists-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","state/hooks.ts","components/404/404.tsx","components/AddItemForm/AddItemForm.tsx","components/PasswordVisibility/PasswordVisibility.tsx","components/Snackbar/ErrorSnackbar.tsx","components/EditableSpan/EditableSpanTitle.tsx","components/Modal/Modal.tsx","features/Login/Login.tsx","features/Login/selectors.tsx","features/Login/DataForLogin/DataForLogin.tsx","features/Login/ErrorInfio/ErrorInfo.tsx","features/Login/WarningText/WarningText.tsx","features/Todolists/selectors.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/Todolist/Task/tasks-reducer.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/TodolistsList.tsx","state/store.ts","components/Header/Header.tsx","app/App.tsx","index.tsx","features/Login/Login.module.css","features/Todolists/Todolist/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","selectRequestStatus","state","app","status","selectIsInitialized","isInitialized","selectAppError","error","theme","createTheme","palette","primary","main","secondary","success","mode","background","default","paper","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","payload","put","todolistId","delete","p","taskId","model","RESULT_CODES","authAPI","handleServerNetworkError","dispatch","setAppError","message","setAppStatus","handleServerAppError","data","messages","length","ALL","ACTIVE","COMPLETED","getTodolists","createAsyncThunk","params","rejectWithValue","res","todolists","removeTodolist","param","setEntityStatus","entityStatus","resultCode","succeeded","addTodolist","todolist","item","updateTodolistTitle","slice","createSlice","name","initialState","reducers","changeFilter","action","index","findIndex","tl","id","filter","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todolistsReducer","reducer","actions","login","thunkAPI","errors","fieldsErrors","undefined","logout","isLoggedIn","setIsLoggedIn","authReducer","setInitialized","appReducer","useAppDispatch","useDispatch","PageNotFound","AddItemForm","React","memo","addItem","disabled","useState","newItemTitle","setNewItemTitle","setError","addItemHandler","trim","className","styles","addItemContainer","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","style","color","Button","maxWidth","maxHeight","minWidth","minHeight","margin","onClick","PasswordVisibility","passwordType","toggleShowPassword","Visibility","VisibilityOff","Alert","props","ref","elevation","ErrorSnackbars","useSelector","handleClose","event","reason","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","EditableSpanTitle","onChangeTitle","widthInput","editMode","setEditMode","newTitle","setTitle","activateViewMode","onBlur","onKeyDown","autoFocus","span","position","top","left","transform","border","boxShadow","ModalDescription","description","handleSave","handleOpen","appStatus","newDescription","setNewDescription","isDisabled","IconButton","fontSize","Dialog","DialogTitle","Divider","bodyDescriptionBlock","DialogContent","DialogActions","size","Login","selectorIsLoggedIn","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","setPasswordType","useCallback","to","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","FormGroup","getFieldProps","touched","type","InputProps","endAdornment","InputAdornment","FormControlLabel","control","Checkbox","checked","auth","DataForLogin","href","target","ErrorInfo","WarningText","warningBlock","warningText","paddingRight","selectorTodolists","TodoList","tasks","onFilterClickHandler","addTaskHandler","addTask","onChangeTodolistTitleHandler","tasksForToDoList","t","New","Completed","tasksList","Task","task","useEffect","getTasks","todolistTitle","DeleteOutlined","items","removeTask","setTaskEntityStatus","updateTask","getState","find","priority","startDate","addedDate","deadline","forEach","tasksReducer","isModalOpen","setIsModalOpen","onChangeTitleHandler","handleModalOpen","handleModalClose","handleModalSave","taskContainer","icons","DeleteOutline","descriptionBlock","TodolistList","addTodolistHandler","padding","Paper","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","devTools","Header","onLoginClickHandler","Box","flexGrow","AppBar","backgroundColor","Toolbar","Typography","component","window","App","requestStatus","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.c899620d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemContainer\":\"AddItemForm_addItemContainer__3VkRY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"EditableSpanTitle_span__3L0SZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icons\":\"Modal_icons__3f5w3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"TodoList_errorMessage__3qCNg\",\"error\":\"TodoList_error__2k7k2\",\"button\":\"TodoList_button__2UrSy\",\"todolistTitle\":\"TodoList_todolistTitle__1tRXl\"};","import axios, {AxiosResponse} from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\n    // baseURL: \"https://todolists.samuraijs.com/api/1.0\",\n    withCredentials: true,\n    headers: {\"api-key\": \"8cb31c3e-5e62-4d4f-945f-025b0014bebf\"}\n});\n\n\nexport const todolistsAPI = {\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(\"/todo-lists\");\n    },\n    createTodolist(title: string) {\n        return instance.post<\"\", AxiosResponse<CommonResType<DataType<TodolistType>>>, { title: string }>(\"/todo-lists\", {title});\n    },\n    updateTodolistTitle(payload: { todolistId: string, title: string }) {\n        return instance.put< { title: string },AxiosResponse<CommonResType>>(`/todo-lists/${payload.todolistId}`, {title: payload.title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<CommonResType>(`/todo-lists/${todolistId}`);\n    },\n    getTasks(todolistId: string) {\n        return instance.get<TaskGetResType>(`/todo-lists/${todolistId}/tasks`);\n    },\n    createTask(p: { todolistId: string, title: string }) {\n        return instance.post<CommonResType<DataType<TaskType>>>(`/todo-lists/${p.todolistId}/tasks`, {title: p.title});\n    },\n    updateTask(payload: { todolistId: string, taskId: string, model: UpdateModel }\n    ) {\n        return instance.put<CommonResType<DataType<TaskType>>>(`/todo-lists/${payload.todolistId}/tasks/${payload.taskId}`, {...payload.model});\n    },\n    deleteTask(payload: { todolistId: string, taskId: string }) {\n        return instance.delete<CommonResType>(`/todo-lists/${payload.todolistId}/tasks/${payload.taskId}`);\n    }\n}\n\n//types\nexport type TodolistType = {\n    id: string;\n    addedDate: string;\n    order: number;\n    title: string;\n}\ntype DataType<D> = {\n    item: D\n}\nexport type FieldsErrorType = {field: string, error: string}\nexport type CommonResType<T = {}> = {\n    resultCode: number;\n    messages: string[];\n    // fieldsErrors: string[];\n    fieldsErrors: FieldsErrorType;\n    data: T;\n}\nexport type TaskGetResType = {\n    items: TaskType[];\n    totalCount: number;\n    error?: string;\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress,\n    Completed,\n    Draft\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    id: string;\n    title: string;\n    description: string;\n    todoListId: string;\n    order: number;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n    addedDate: string;\n}\nexport type UpdateModel = {\n    title: string;\n    description: string;\n    // completed: boolean;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n}\n\n\n","import {AppRootState} from '../state/store';\n\nexport const selectRequestStatus = (state: AppRootState) => {\n   return state.app.status\n};\nexport const selectIsInitialized = (state: AppRootState) => {\n    return  state.app.isInitialized;\n}\nexport const selectAppError = (state: AppRootState) => state.app.error;\n","import {createTheme} from \"@mui/material\";\n\n\nexport const theme = createTheme({\n    palette: {\n        primary: {\n            main:  \"#9999ff\",\n        },\n        secondary: {\n            main:\n                \"#66b1d1\",\n        },\n        success: {\n            main: \"#c7f774\",\n        },\n        mode: \"dark\",\n        background: {\n            default: \"#242e41\",\n            paper: \"#2e3b52\"\n        },\n    }\n})","import {CommonResType, instance} from \"./todolistsAPI\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport const authAPI = {\n    login(payload: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<CommonResType<{ userId?: number }>>>(\"/auth/login\", payload);\n    },\n    me(){\n        return instance.get<CommonResType<MeGetType>>(\"/auth/me\");\n    },\n    logout() {\n        return instance.delete<CommonResType>(\"/auth/login\");\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string,\n    password: string,\n    rememberMe?: boolean,\n    captcha?: string\n}\n\n\ntype MeGetType = {\n    id: number\n    login: string\n    email: string\n}\n\n","import {\n    // addTodolistAC,\n    // changeFilterAC,\n    // changeTodolistTitleAC,\n    // removeTodolistAC,\n    // setEntityStatusAC,\n    // setTodolists\n} from \"../../features/Todolists/todolists-reducer\";\n\n\nexport enum RESULT_CODES {\n    succeeded = 0,\n    error = 1,\n    // bad_captcha = 2\n}\n","import {Dispatch} from \"redux\";\nimport {setAppStatus, setAppError} from '../app';\nimport {CommonResType} from \"../api/todolistsAPI\";\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\n    dispatch(setAppError({error: error.message}));\n    dispatch(setAppStatus({status: \"failed\"}));\n}\nexport const handleServerAppError = <T>(data: CommonResType<T>, dispatch: Dispatch) => {\n    dispatch(setAppError(data.messages.length ? {error: data.messages[0]} : {error: \"Some error occurred\"}))\n    dispatch(setAppStatus({status: \"failed\"}))\n}","import {todolistsAPI, TodolistType} from \"../../api/todolistsAPI\";\nimport {RESULT_CODES} from \"../../state/types/types\";\nimport {RequestStatusType, setAppStatus} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n\nexport const ALL = \"all\";\nexport const ACTIVE = \"active\";\nexport const COMPLETED = \"completed\";\n\n\nconst initialState = [] as Array<TodolistDomainType>;\n\nexport const getTodolists = createAsyncThunk(\"todolists/getTodolists\", async (params, {rejectWithValue, dispatch}) => {\n    dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.getTodolist();\n        dispatch(setAppStatus({status: \"succeeded\"}));\n        return {todolists: res.data}\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue(null);\n    }\n})\n\nexport const removeTodolist = createAsyncThunk(\"todolists/removeTodolists\", async (param: { todolistId: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatus({status: \"loading\"}))\n    dispatch(setEntityStatus({todolistId: param.todolistId, entityStatus: \"loading\"}))\n\n    try {\n        const res = await todolistsAPI.deleteTodolist(param.todolistId);\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolistId: param.todolistId};\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n        // dispatch(setEntityStatus({todolistId: param.todolistId, entityStatus: \"failed\"}));\n        // return rejectWithValue(null);\n\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        dispatch(setEntityStatus({todolistId: param.todolistId, entityStatus: \"failed\"}));\n        return rejectWithValue(null);\n    }\n});\n\n\nexport const addTodolist = createAsyncThunk(\"todolists/addTodolist\", async (param: { title: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.createTodolist(param.title);\n        //@ts-ignore\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolist: res.data.data.item}\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue(null);\n    }\n})\n\nexport const updateTodolistTitle = createAsyncThunk(\"todolists/updateTodolistTitle\", async (param: { todolistId: string, title: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatus({status: \"loading\"}));\n    try {\n        const res = await todolistsAPI.updateTodolistTitle({todolistId: param.todolistId, title: param.title});\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolistId: param.todolistId, title: param.title}\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue(null);\n    }\n})\n\nconst slice = createSlice({\n    name: \"todolists\",\n    initialState,\n    reducers: {\n        changeFilter(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state[index].filter = action.payload.filter;\n        },\n\n        setEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state[index].entityStatus = action.payload.entityStatus;\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getTodolists.fulfilled, (state, action) => {\n            return action.payload.todolists.map(tl => ({...tl, filter: ALL, entityStatus: \"idle\"}));\n        });\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state.splice(index, 1);\n        });\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\n            state.unshift({...action.payload.todolist, filter: ALL, entityStatus: \"idle\"})\n        });\n        builder.addCase(updateTodolistTitle.fulfilled, (state, action) => {\n            let index = state.findIndex(tl => tl.id === action.payload.todolistId);\n            state[index].title = action.payload.title;\n        });\n    }\n})\nexport const todolistsReducer = slice.reducer;\nexport const {\n    changeFilter,\n    setEntityStatus\n} = slice.actions;\n","import {RESULT_CODES} from \"../../state/types/types\";\nimport {authAPI, LoginParamsType} from \"../../api/authAPI\";\nimport {setAppStatus} from '../../app';\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {FieldsErrorType} from \"../../api/todolistsAPI\";\n\nexport type InitialStateType = typeof initialState;\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport const login = createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldsErrorType> } }>(\n    \"auth/login\",\n    //@ts-ignore\n    async (data, thunkAPI) => {\n        thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\n        try {\n            const res = await authAPI.login(data);\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n                // return {isLoggedIn: true};\n            } else {\n                handleServerAppError(res.data, thunkAPI.dispatch);\n                return thunkAPI.rejectWithValue({errors: res.data.messages,\n                    //@ts-ignore\n                    fieldsErrors: res.data.fieldsErrors});\n            }\n        } catch (error: any) {\n            // if (axios.isAxiosError(error)) {\n            handleServerNetworkError(error, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue({errors: [error], fieldsErrors: undefined});\n            // }\n        }\n    })\n\nexport const logout = createAsyncThunk(\"auth/logout\", async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\n    try {\n        const res = await authAPI.logout();\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue(null);\n        }\n    } catch (error: any) {\n        // if (axios.isAxiosError(error)) {\n        //     const error: AxiosError = err;\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        return thunkAPI.rejectWithValue(null);\n        // }\n    }\n})\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\n            state.isLoggedIn = action.payload.isLoggedIn\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(login.fulfilled, (state, action) => {\n            state.isLoggedIn = true\n        });\n        builder.addCase(logout.fulfilled, (state, action) => {\n            state.isLoggedIn = false\n        })\n    }\n})\n\nexport const authReducer = slice.reducer;\nexport const {setIsLoggedIn} = slice.actions;\n","import {authAPI} from \"../api/authAPI\";\nimport {RESULT_CODES} from \"../state/types/types\";\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\nexport type InitialStateType = typeof initialState;\n\nconst initialState = {\n    //do we have interaction with server\n    status: \"idle\" as RequestStatusType,\n    // global error text\n    error: null as string | null,\n    //is our app has already initialized\n    isInitialized: false\n}\n\n\nexport const setInitialized = createAsyncThunk(\"app/setInitialized\", async (params, thunkAPI) => {\n\n    const res = await authAPI.me()\n    try {\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\n        }\n    } finally {\n        return {isInitialized: true}\n        // thunkAPI.dispatch(setIsInitialized({isInitialized: true}));\n    }\n    // .then((res) => {\n    //     if (res.data.resultCode === RESULT_CODES.succeeded) {\n    //         thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\n    //     }\n    // })\n    // .finally(() => {\n    //     thunkAPI.dispatch(setIsInitialized({isInitialized: true}));\n    // })\n})\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState,\n    reducers: {\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        },\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        // setIsInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\n        //     state.isInitialized = action.payload.isInitialized\n        // }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(setInitialized.fulfilled, (state, action) => {\n            state.isInitialized = true\n        })\n    }\n})\n\nexport const appReducer = slice.reducer;\nexport const {setAppStatus, setAppError} = slice.actions;\n\n\n// import {authAPI} from \"../api/authAPI\";\n// import {RESULT_CODES} from \"../state/types/types\";\n// import {setIsLoggedIn} from '../features';\n// import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n//\n// export type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n// export type InitialStateType = typeof initialState;\n//\n// const initialState = {\n//     //do we have interaction with server\n//     status: \"idle\" as RequestStatusType,\n//     // global error text\n//     error: null as string | null,\n//     //is our app has already initialized\n//     isInitialized: false\n// }\n//\n//\n// export const setInitialized = createAsyncThunk(\"app/setInitialized\", async (params, thunkAPI) => {\n//     const res = await authAPI.me()\n//     try {\n//         if (res.data.resultCode === RESULT_CODES.succeeded) {\n//             thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\n//         }\n//     } finally {\n//         return {isInitialized: true}\n//     }\n// })\n//\n// const slice = createSlice({\n//     name: \"app\",\n//     initialState,\n//     reducers: {\n//         setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\n//             state.status = action.payload.status\n//         },\n//         setAppError(state, action: PayloadAction<{ error: string | null }>) {\n//             state.error = action.payload.error\n//         },\n//     },\n//     extraReducers: (builder) => {\n//         builder.addCase(setInitialized.fulfilled, (state, action) => {\n//             state.isInitialized = true\n//         })\n//     }\n// })\n//\n// export const appReducer = slice.reducer;\n// export const {setAppStatus, setAppError} = slice.actions;\n","import {AppDispatch, AppRootState} from \"./store\";\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n// export const useAppSelector: TypedUseSelectorHook<AppRootState> = useSelector;\n","import React from 'react';\n\nexport const PageNotFound = () => {\n    return (\n        <div>\n            <h1>404: PAGE NOT FOUND</h1>\n        </div>\n    );\n};\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\nimport styles from './AddItemForm.module.css';\n\ntype PropsType = {\n    addItem: (title: string) => void;\n    disabled: boolean\n}\n\nexport const AddItemForm = React.memo(({addItem, disabled}: PropsType) => {\n    const [newItemTitle, setNewItemTitle] = useState(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewItemTitle(e.currentTarget.value);\n        error && setError(null);\n    };\n\n    let addItemHandler = () => {\n        let trimedItem = newItemTitle.trim();\n        if (trimedItem) {\n            addItem(newItemTitle);\n        } else {\n            setError(\"Title is required\");\n        }\n        setNewItemTitle(\"\");\n    }\n    let onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        e.key === \"Enter\" && addItemHandler();\n    }\n\n    return (\n        <div className={styles.addItemContainer}>\n            <TextField variant=\"outlined\"\n\n                       value={newItemTitle}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyDownHandler}\n                       error={!!error}\n                       label={error ? \"Title is required\" : \"Title\"}\n                       style={{color: \"white\"}}\n                       disabled={disabled}\n            />\n\n            <Button\n                variant={\"contained\"}\n                style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth: \"30px\", minHeight: \"30px\", margin: \"5px\"}}\n                onClick={addItemHandler}\n                disabled={error !== null || disabled && true}\n            >+</Button>\n        </div>\n    );\n});\n","import React, {memo} from \"react\";\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\n\ntype PropsType = {\n    toggleShowPassword: any;\n    passwordType: string;\n}\n\nexport const PasswordVisibility = memo(({passwordType, toggleShowPassword}: PropsType) => {\n\n    return (\n        <span onClick={toggleShowPassword}>\n             {passwordType === \"password\" ? <Visibility/> : <VisibilityOff/>}\n        </span>\n    )\n});\n","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {useAppDispatch} from \"../../state\";\nimport {selectAppError, setAppError} from '../../app';\nimport {useSelector} from 'react-redux';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbars = () => {\n    const error = useSelector(selectAppError);\n    const dispatch = useAppDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppError({error: null}));\n    };\n\n    return (\n        <Stack spacing={2} sx={{ width: '100%' }}>\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                    {error}\n                </Alert>\n            </Snackbar>\n        </Stack>\n    );\n}\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {TextField} from '@mui/material';\nimport styles from './EditableSpanTitle.module.css';\n\ntype PropsType = {\n    title: string;\n    onChangeTitle: (title: string) => void;\n    disabled: boolean;\n    widthInput?: string;\n}\n\n\nexport const EditableSpanTitle: React.FC<PropsType> = React.memo(({title, onChangeTitle, disabled, widthInput} : PropsType) => {\n    const [editMode, setEditMode] = useState(false);\n    const [newTitle, setTitle] = useState(title);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(title);\n    }\n\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n    const activateViewMode = () => {\n        setEditMode(false);\n        onChangeTitle(newTitle)\n    }\n\n    const onKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        event.key === 'Enter' && activateViewMode();\n    }\n\n    return (\n        editMode ? <TextField\n                style={widthInput ? {width: widthInput} : {}}\n                color={'secondary'}\n                variant=\"standard\"\n                value={newTitle}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                onKeyDown={onKeyDownHandler}\n                autoFocus\n                disabled={disabled}\n            />\n            : <div className={styles.span} onClick={activateEditMode}>{title}</div>\n    );\n});\n","import React, {memo, useState} from \"react\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Divider, IconButton} from \"@mui/material\";\nimport {EditableSpanTitle} from \"../EditableSpan/EditableSpanTitle\";\nimport {UpdateModuleType} from \"../../features/Todolists/Todolist/Task/tasks-reducer\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport styles from \"./Modal.module.css\";\nimport {selectRequestStatus} from '../../app';\nimport {useSelector} from 'react-redux';\n\n\ntype PropsType = {\n    open: boolean;\n    description: string;\n    title: string;\n    handleSave: (model: UpdateModuleType) => void;\n    handleClose: () => void;\n    handleOpen: () => void;\n}\n\nconst style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"100%\",\n    minHeight: \"100vh\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n}\n\nexport const ModalDescription = memo(({open, description, handleClose, title, handleSave, handleOpen}: PropsType) => {\n    const appStatus = useSelector(selectRequestStatus);\n\n    const [newDescription, setNewDescription] = useState(description);\n\n    const onChangeDescriptionHandler = (newTitle: string) => {\n        setNewDescription(newTitle)\n    }\n\n    const onSaveClickHandler = () => {\n        handleSave({description: newDescription});\n    }\n\n    const isDisabled = appStatus === \"loading\";\n\n    return (\n        <div>\n            <IconButton  aria-label=\"add description\"  onClick={handleOpen} disabled={isDisabled}>\n                <AssignmentIcon style={{color: \"#6b7d84\"}} fontSize={\"small\"}/>\n            </IconButton>\n            <Dialog sx={style} open={open} onClose={handleClose}>\n                <DialogTitle>{title}</DialogTitle>\n                <Divider/>\n\n                <div className={styles.bodyDescriptionBlock}>\n                    <DialogContent style={{maxWidth: \"500px\"}}>\n                        <EditableSpanTitle\n                            widthInput={\"350px\"}\n                            title={newDescription ? newDescription : \"Click on text to add new description\"}\n                            onChangeTitle={onChangeDescriptionHandler}\n                            disabled={isDisabled}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            style={{margin: 15}}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"success\"\n                            onClick={onSaveClickHandler}\n                            disabled={isDisabled}\n                            autoFocus>Save\n                        </Button>\n                        <Button\n                            style={{margin: 15}}\n                            size=\"small\"\n                            color=\"success\"\n                            variant=\"outlined\"\n                            onClick={handleClose}\n                            disabled={isDisabled}>Close\n                        </Button>\n                    </DialogActions>\n                </div>\n            </Dialog>\n        </div>\n    );\n});\n","import React, {useCallback, useState} from 'react';\nimport {\n    Grid,\n    InputAdornment,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    TextField,\n    Button\n} from '@mui/material';\nimport {FormikErrors, FormikHelpers, useFormik} from 'formik';\nimport {useAppDispatch} from '../../state';\nimport {Navigate} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\nimport {selectorIsLoggedIn, ErrorInfo, DataForLogin, WarningText, login} from '.';\nimport {PasswordVisibility} from '../../components';\n\ntype FormikValuesType = {\n    email: string;\n    password: string;\n    rememberMe: boolean;\n}\n\nexport const Login = () => {\n    const dispatch = useAppDispatch();\n\n    const isLoggedIn = useSelector(selectorIsLoggedIn);\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrors<FormikValuesType> = {};\n\n            if (!values.email) {\n                errors.email = 'Email is required'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (values.password.length < 2) {\n                errors.password = 'Password should be minimum 2 symbols';\n            }\n            return errors\n        },\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\n            const res = await dispatch(login(values));\n            if (login.rejected.match(res)) {\n                //@ts-ignore\n                if (res.payload?.fieldsErrors?.length) {\n                    //@ts-ignore\n                    const error = res.payload.fieldsErrors[0];\n                    formikHelpers.setFieldError(error.field, error.error);\n                }\n            }\n            formik.resetForm();\n        },\n    })\n\n    const [passwordType, setPasswordType] = useState('password');\n\n    const toggleShowPassword = useCallback(() => {\n        passwordType === 'password' ? setPasswordType('text') : setPasswordType('password')\n    }, [passwordType]);\n\n\n    if (isLoggedIn) {\n        return <Navigate to={'/todolist-app'}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n\n                    <FormLabel>\n                        <DataForLogin/>\n                        <WarningText/>\n                    </FormLabel>\n\n                    <FormGroup style={{width: '340px'}}>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n                        <ErrorInfo touched={formik.touched.email} errors={formik.errors.email}/>\n\n                        <TextField type={passwordType} label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                                   InputProps={{\n                                       endAdornment: <InputAdornment position=\"end\">\n                                           <PasswordVisibility passwordType={passwordType}\n                                                               toggleShowPassword={toggleShowPassword}/>\n                                       </InputAdornment>\n                                   }}\n                        />\n                        <ErrorInfo touched={formik.touched.password} errors={formik.errors.password}/>\n\n                        <FormControlLabel label={'Remember me'} control={\n                            <Checkbox\n                                {...formik.getFieldProps('rememberMe')}\n                                checked={formik.values.rememberMe}\n                            />}/>\n\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import {AppRootState} from '../../state/store';\n\nexport const selectorIsLoggedIn = (state: AppRootState) => state.auth.isLoggedIn;\n","import React from 'react';\n\nexport const DataForLogin = () => {\n    return (\n        <div>\n            <p>To log in get registered\n                <a style={{color: 'white'}} href={'https://social-network.samuraijs.com/'}\n                   target={'_blank'}> here\n                </a>\n            </p>\n            <p>or use common test account credentials:</p>\n            <p>Email: anna.blackbird1@gmail.com</p>\n            <p>Password: Free12345</p>\n        </div>\n    );\n};\n","import React from 'react';\nimport style from '../Login.module.css';\n\ntype PropsType = {\n    touched: boolean | undefined;\n    errors: string | undefined;\n}\n\nexport const ErrorInfo = ({touched, errors}: PropsType) => {\n    return (\n        <div>\n            {touched && errors &&\n                <div className={style.error}>{errors}</div>}\n        </div>\n    );\n};\n","import React from 'react';\nimport style from '../Login.module.css';\nimport WarningIcon from '@mui/icons-material/Warning';\n\nexport const WarningText = () => {\n    return (\n        <div className={style.warningBlock}>\n            <div className={style.warningText}>\n                <WarningIcon fontSize=\"large\" style={{color: 'orange', paddingRight: '10px'}}/>\n                If you have some issue with log in using Safari, please follow instructions:\n            </div>\n            <div>\n                Click the Safari menu, you will see the Preferences item - click on it. Then click the Privacy item\n                to see privacy related options. You will see the Website tracking checkbox. Click on Prevent\n                cross-site tracking.\n            </div>\n        </div>\n    );\n};\n","import {AppRootState} from '../../state/store';\n\nexport const selectorTodolists = (state: AppRootState) => state.todolists;\n","import React, {useCallback, useEffect} from \"react\";\nimport {AddItemForm, EditableSpanTitle} from '../../../components';\nimport {Button, IconButton} from \"@mui/material\";\nimport {DeleteOutlined} from \"@mui/icons-material\";\nimport {TaskDomainType} from \"./Task/tasks-reducer\";\nimport {\n    ACTIVE,\n    ALL,\n    changeFilter,\n    COMPLETED,\n    FilterValuesType,\n    removeTodolist,\n    TodolistDomainType,\n    updateTodolistTitle,\n} from \"../todolists-reducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootState} from \"../../../state/store\";\nimport {Task, addTask, getTasks } from '.';\nimport styles from \"./TodoList.module.css\";\nimport {TaskStatuses} from \"../../../api/todolistsAPI\";\nimport {useAppDispatch} from '../../../state';\n\n\ntype PropsType = {\n    todolist: TodolistDomainType;\n}\n\nexport const TodoList = React.memo(({todolist}: PropsType) => {\n    const {title, id: todolistId, filter, entityStatus} = todolist;\n    let tasks = useSelector<AppRootState, Array<TaskDomainType>>(state => state.tasks[todolistId]);\n    const dispatch = useAppDispatch();\n\n\n    const onFilterClickHandler = useCallback((filter: FilterValuesType) => {\n        return () => dispatch(changeFilter({todolistId, filter}));\n    }, [dispatch, filter])\n\n    const removeTodolistHandler = () => {\n        dispatch(removeTodolist({todolistId}))\n    }\n    const addTaskHandler = useCallback((title: string) => {\n        dispatch(addTask({todolistId, title}));\n    }, [dispatch]);\n\n    const onChangeTodolistTitleHandler = useCallback((title: string) => {\n        dispatch(updateTodolistTitle({todolistId, title}))\n    }, [title, dispatch])\n\n    const isDisabled = entityStatus === \"loading\";\n\n    let tasksForToDoList = tasks;\n    switch (filter) {\n        case ACTIVE:\n            tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\n            break\n        case COMPLETED:\n            tasksForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\n            break\n    }\n\n\n    let tasksList = tasks.length ?\n        tasksForToDoList.map((t) => {\n            return (\n                <Task key={t.id} task={t} todolistId={todolistId}/>\n            )\n        }) :\n        <span>Your task list is empty</span>\n\n\n    useEffect(() => {\n        dispatch(getTasks(todolistId));\n    }, []);\n\n//JSX\n    return (\n        <div>\n            <h3 className={styles.todolistTitle}>\n                <EditableSpanTitle title={title} onChangeTitle={onChangeTodolistTitleHandler} disabled={isDisabled}/>\n                <IconButton aria-label=\"delete\" onClick={removeTodolistHandler} disabled={isDisabled}>\n                    <DeleteOutlined style={{color: \"#6b7d84\"}}/>\n                </IconButton>\n            </h3>\n            <div>\n                <AddItemForm addItem={addTaskHandler} disabled={isDisabled }/>\n            </div>\n            <div>\n                {tasksList}\n            </div>\n            <div>\n                <Button\n                    variant={`${filter === ALL ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ALL)}\n                >All</Button>\n                <Button\n                    variant={`${filter === ACTIVE ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ACTIVE)}\n                    color={\"secondary\"}\n                >Active</Button>\n                <Button\n                    variant={`${filter === COMPLETED ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(COMPLETED)}\n                    size={\"small\"}\n                    color={\"success\"}\n                >Completed</Button>\n            </div>\n            <div>\n                {/*<Button title={\"undo\"} onClikCallback={props.setPrevState}/>*/}\n            </div>\n        </div>\n    )\n});\n","import {addTodolist, getTodolists, removeTodolist} from \"../../todolists-reducer\";\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from \"../../../../api/todolistsAPI\";\nimport {RESULT_CODES} from \"../../../../state/types/types\";\nimport {AppRootState} from \"../../../../state/store\";\nimport {RequestStatusType, setAppStatus} from \"../../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type TaskDomainType = TaskType & {\n    entityStatus: RequestStatusType\n}\n\nexport type UpdateModuleType = {\n    title?: string;\n    description?: string;\n    completed?: boolean;\n    status?: TaskStatuses;\n    priority?: TaskPriorities;\n    startDate?: string;\n    deadline?: string;\n}\n\nexport type TasksType = {\n    [key: string]: Array<TaskDomainType>\n}\n\nconst initialState: TasksType = {}\n\n\nexport const getTasks = createAsyncThunk(\"tasks/getTasks\", async (todolistId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.getTasks(todolistId)\n\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\n        return {todolistId, tasks: res.data.items}\n    } catch (error: any) {\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        return thunkAPI.rejectWithValue(null);\n    }\n})\n\nexport const removeTask = createAsyncThunk(\"tasks/removeTask\", async (param: { todolistId: string, taskId: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}));\n    thunkAPI.dispatch(setTaskEntityStatus({\n        todolistId: param.todolistId,\n        taskId: param.taskId,\n        entityStatus: \"loading\"\n    }));\n    try {\n        const res = await todolistsAPI.deleteTask({todolistId: param.todolistId, taskId: param.taskId})\n\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n            thunkAPI.dispatch(setTaskEntityStatus({\n                todolistId: param.todolistId,\n                taskId: param.taskId,\n                entityStatus: \"succeeded\"\n            }));\n            return {todolistId: param.todolistId, taskId: param.taskId};\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch);\n            thunkAPI.dispatch(setTaskEntityStatus({\n                todolistId: param.todolistId,\n                taskId: param.taskId,\n                entityStatus: \"failed\"\n            }));\n            return thunkAPI.rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        thunkAPI.dispatch(setTaskEntityStatus({\n            todolistId: param.todolistId,\n            taskId: param.taskId,\n            entityStatus: \"failed\"\n        }));\n        return thunkAPI.rejectWithValue(null);\n    }\n})\n\n\nexport const addTask = createAsyncThunk(\"tasks/addTask\", async (param: { todolistId: string, title: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\n    try {\n        const res = await todolistsAPI.createTask(param);\n        if (res.data.resultCode === RESULT_CODES.succeeded) {\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}));\n            return {todolistId: param.todolistId, task: res.data.data.item}\n        } else {\n            handleServerAppError<{ item: TaskType }>(res.data, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue(null);\n        }\n    } catch (error: any) {\n        handleServerNetworkError(error, thunkAPI.dispatch);\n        return thunkAPI.rejectWithValue(null);\n    }\n})\n\n\nexport const updateTask = createAsyncThunk(\"tasks/updateTask\", async (param: {\n    todolistId: string,\n    taskId: string,\n    model: UpdateModuleType\n}, {dispatch, rejectWithValue, getState}) => {\n\n    dispatch(setAppStatus({status: \"loading\"}));\n    dispatch(setTaskEntityStatus({todolistId: param.todolistId, taskId: param.taskId, entityStatus: \"loading\"}));\n    const state = getState() as AppRootState;\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\n    if (task) {\n        const res = await todolistsAPI.updateTask({\n            todolistId: param.todolistId, taskId: param.taskId, model: {\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.addedDate,\n                deadline: task.deadline,\n                ...param.model\n            }\n        })\n        try {\n            if (res.data.resultCode === RESULT_CODES.succeeded) {\n                dispatch(setAppStatus({status: \"succeeded\"}));\n                dispatch(setTaskEntityStatus({\n                    todolistId: param.todolistId,\n                    taskId: param.taskId,\n                    entityStatus: \"succeeded\"\n                }));\n                return {todolistId: param.todolistId, taskId: param.taskId, task: res.data.data.item};\n            } else {\n                handleServerAppError<{ item: TaskType }>(res.data, dispatch);\n                dispatch(setTaskEntityStatus({\n                    todolistId: param.todolistId,\n                    taskId: param.taskId,\n                    entityStatus: \"failed\"\n                }));\n                return rejectWithValue(null);\n            }\n        } catch (error: any) {\n            handleServerNetworkError(error, dispatch);\n            dispatch(setTaskEntityStatus({todolistId: param.todolistId, taskId: param.taskId, entityStatus: \"failed\"}));\n            return rejectWithValue(null);\n        }\n    }\n    return rejectWithValue(null);\n\n})\n\nconst slice = createSlice({\n    name: \"tasks\",\n    initialState,\n    reducers: {\n        setTaskEntityStatus(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\n            let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                state[action.payload.todolistId][index].entityStatus = action.payload.entityStatus;\n            }\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\n            state[action.payload.todolist.id] = []\n        });\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\n            delete state[action.payload.todolistId]\n        });\n        builder.addCase(getTodolists.fulfilled, (state, action) => {\n            action.payload.todolists.forEach(t => {\n                state[t.id] = [];\n            })\n        });\n        builder.addCase(getTasks.fulfilled, (state, action) => {\n            state[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}));\n        });\n        builder.addCase(removeTask.fulfilled, (state, action) => {\n            let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                state[action.payload.todolistId].splice(index, 1);\n            }\n        });\n        builder.addCase(addTask.fulfilled, (state, action) => {\n            state[action.payload.todolistId].unshift({...action.payload.task, entityStatus: \"idle\"});\n        });\n        builder.addCase(updateTask.fulfilled, (state, action) => {\n            let index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                state[action.payload.todolistId][index] = {...action.payload.task, entityStatus: \"idle\"};\n            }\n        });\n    }\n});\n\nexport const tasksReducer = slice.reducer;\nexport const {setTaskEntityStatus} = slice.actions;\n","import {removeTask, TaskDomainType, UpdateModuleType, updateTask} from './tasks-reducer';\nimport React, {ChangeEvent, useCallback, useState} from 'react';\nimport {Checkbox, IconButton} from '@mui/material';\nimport {EditableSpanTitle, ModalDescription} from '../../../../components';\nimport {DeleteOutline} from '@mui/icons-material';\nimport styles from './Task.module.css';\nimport {TaskStatuses} from '../../../../api/todolistsAPI';\nimport {useAppDispatch} from '../../../../state';\n\ntype TaskPropsType = {\n    task: TaskDomainType;\n    todolistId: string\n}\nexport const Task = React.memo(({task, todolistId}: TaskPropsType) => {\n    const dispatch = useAppDispatch();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const onRemoveHandler = () => {\n        dispatch(removeTask({todolistId, taskId: task.id}));\n    };\n\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = task.status === TaskStatuses.Completed ? TaskStatuses.New : TaskStatuses.Completed\n        dispatch(updateTask({todolistId, taskId: task.id, model: {status}}))\n    }\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\n        dispatch(updateTask({todolistId, taskId: task.id, model: {title: newTitle}}))\n    }, [todolistId, task.id, dispatch]);\n\n    const handleModalOpen = useCallback(() => {\n        setIsModalOpen(true);\n    }, [isModalOpen, dispatch]);\n\n    const handleModalClose = useCallback(() => {\n        setIsModalOpen(false);\n    }, [isModalOpen, dispatch]);\n\n    const handleModalSave = useCallback((model: UpdateModuleType) => {\n        dispatch(updateTask({todolistId, taskId: task.id, model}));\n        setIsModalOpen(false);\n    }, [isModalOpen, task.id, todolistId, task.description, dispatch]);\n\n    let isDisabled = task.entityStatus === 'loading';\n\n    return (\n\n        <div>\n            <div className={styles.taskContainer}>\n                <div className={styles.task}>\n                    <div>\n                        <Checkbox\n                            style={{color: '#c7f774'}}\n                            checked={task.status === TaskStatuses.Completed}\n                            onChange={onStatusChangeHandler}\n                            disabled={isDisabled}\n                        />\n                    </div>\n                    <EditableSpanTitle title={task.title} onChangeTitle={onChangeTitleHandler} disabled={isDisabled}/>\n                </div>\n                <div className={styles.icons}>\n                    <ModalDescription open={isModalOpen}\n                                      description={task.description}\n                                      title={task.title}\n                                      handleSave={handleModalSave}\n                                      handleClose={handleModalClose}\n                                      handleOpen={handleModalOpen}\n                    />\n                    <IconButton aria-label=\"delete task\" onClick={onRemoveHandler} disabled={isDisabled}>\n                        <DeleteOutline style={{color: '#6b7d84'}} fontSize={'small'}/>\n                    </IconButton>\n                </div>\n            </div>\n            <div className={styles.descriptionBlock}>\n                {task.description}\n            </div>\n        </div>\n    )\n})\n\n","// import {useSelector} from \"react-redux\";\nimport {addTodolist, getTodolists, TodolistDomainType} from \"./todolists-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {AddItemForm} from '../../components';\nimport {useAppDispatch} from '../../state';\nimport {Navigate} from \"react-router-dom\";\nimport {selectorIsLoggedIn} from '../Login';\nimport {selectorTodolists, TodoList} from '.';\nimport {useSelector} from 'react-redux';\n\n\nexport const TodolistList = () => {\n    const todolists = useSelector(selectorTodolists);\n    const isLoggedIn = useSelector(selectorIsLoggedIn);\n\n    const dispatch = useAppDispatch();\n\n    const addTodolistHandler = useCallback((title: string) => {\n        dispatch(addTodolist({title}))\n    }, [dispatch]);\n\n    useEffect(() => {\n        if(!isLoggedIn) {\n            return\n        }\n\n        dispatch(getTodolists());\n    }, [])\n\n\n    if(!isLoggedIn) {\n        return <Navigate to={\"/todolist-app/login\"}/>\n    }\n\n    return <>\n        <Grid container style={{padding: \"20px\"}}>\n            <AddItemForm addItem={addTodolistHandler} disabled={false}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {todolists.map((tl: TodolistDomainType) => {\n                return (\n                    <Grid item key={tl.id}>\n                        <Paper style={{padding: \"20px\", width: \"300px\"}}>\n                            <TodoList todolist={tl}/>\n                        </Paper>\n                    </Grid>\n                )\n            })}\n        </Grid>\n    </>\n}\n","import {combineReducers } from 'redux';\nimport thunk, {ThunkDispatch} from 'redux-thunk';\nimport {authReducer, todolistsReducer, tasksReducer} from '../features';\nimport {appReducer} from '../app/app-reducer';\nimport {configureStore} from '@reduxjs/toolkit';\n\nexport type AppRootState = ReturnType<typeof rootReducer>;\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = ThunkDispatch<AppRootState, unknown, any>;\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\nexport const store = configureStore({\n        reducer: rootReducer,\n        middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\n        devTools: true\n    }\n)\n\n//@ts-ignore\nwindow.store = store;\n","import * as React from \"react\";\nimport {useCallback} from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport {useAppDispatch} from '../../state';\nimport {logout, selectorIsLoggedIn} from '../../features';\nimport {useSelector} from 'react-redux';\n\nexport function Header() {\n    const isLoggedIn = useSelector(selectorIsLoggedIn);\n    const dispatch = useAppDispatch();\n\n\n    const onLoginClickHandler = useCallback(() => {\n        dispatch(logout());\n    }, [isLoggedIn]);\n\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <AppBar position=\"static\"\n                    style={{backgroundColor: \"#66b1d1\"}}\n            >\n                <Toolbar>\n                    <Typography variant=\"h6\"\n                                component=\"div\"\n                                sx={{flexGrow: 1, margin: '0 20px'}}>Todolist\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={onLoginClickHandler}>Logout</Button>}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}\n\nexport default Header;\n\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {Header} from \"../components/Header/Header\";\r\nimport Container from \"@mui/material/Container\";\r\nimport {TodolistList} from '../features';\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {ErrorSnackbars, PageNotFound} from '../components';\r\nimport {useSelector} from \"react-redux\";\r\nimport {setInitialized} from \"./app-reducer\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from '../features';\r\nimport {useAppDispatch} from '../state';\r\nimport {selectIsInitialized, selectRequestStatus} from './selectors';\r\n\r\n\r\nexport function App () {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const requestStatus = useSelector(selectRequestStatus);\r\n    const isInitialized = useSelector(selectIsInitialized);\r\n\r\n    useEffect(() => {\r\n        dispatch(setInitialized());\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n                <CircularProgress color=\"primary\"/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {requestStatus === \"loading\" && <LinearProgress/>}\r\n            <ErrorSnackbars/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/todolist-app\"} element={<TodolistList/>}/>\r\n                    <Route path={\"/todolist-app/login\"} element={<Login/>}></Route>\r\n                    <Route path={\"/404\"} element={<PageNotFound/>}/>\r\n                    <Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport {App, theme} from './app';\r\nimport { CssBaseline, ThemeProvider} from \"@mui/material\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    ,\r\n    document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__25Eh1\",\"warningBlock\":\"Login_warningBlock__QIBvy\",\"warningText\":\"Login_warningText__QFN97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskContainer\":\"Task_taskContainer__28r9R\",\"task\":\"Task_task__2Pjwc\",\"taskIsDone\":\"Task_taskIsDone__2VCLH\",\"icons\":\"Task_icons__36xxZ\",\"descriptionBlock\":\"Task_descriptionBlock__1ST9D\"};"],"sourceRoot":""}