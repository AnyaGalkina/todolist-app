{"version":3,"sources":["components/Input/AddItemForm.tsx","components/EditableSpanTitle.tsx","state/todolists-reducer.ts","state/tasks-reducer.tsx","components/TodoList.tsx","components/Header/Header.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx","components/TodoList.module.css"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","style","color","Button","maxWidth","maxHeight","minWidth","minHeight","onClick","disabled","EditableSpanTitle","editMode","setEditMode","title","setTitle","activateViewMode","onChangeTitle","event","onBlur","onKeyDown","autoFocus","onDoubleClick","ALL","todoListId1","v1","todoListId2","initialState","id","filter","initalState","taskTitle","isDone","TodoList","todolist","todolistId","dispatch","useDispatch","tasks","useSelector","state","onFilterClickHandler","type","payload","changeFilterAC","tasksForToDoList","t","tasksList","length","map","className","styles","Checkbox","checked","taskId","changeTaskStatusAC","newTitle","changeTaskTitleAC","IconButton","aria-label","removeTaskAC","DeleteOutline","fontSize","changeTodolistTitleAC","console","log","removeTodolistAC","DeleteOutlined","addTaskAC","size","Header","Box","sx","flexGrow","AppBar","position","backgroundColor","Toolbar","edge","mr","Typography","component","App","todolists","Container","fixed","Grid","container","padding","newTodolistId","addTodolistAC","spacing","tl","item","Paper","width","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newTask","newState","store","legacy_createStore","theme","createTheme","palette","primary","main","secondary","success","mode","background","default","paper","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.7f3129a4.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype PropsType = {\n    addItem: (title: string) => void;\n}\n\n\nconst AddItemForm: React.FC<PropsType> = (props) => {\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTaskTitle(e.currentTarget.value);\n        error && setError(null);\n    };\n\n    let addItem = () => {\n        let trimedTask = newTaskTitle.trim();\n        if (trimedTask) {\n            props.addItem(newTaskTitle);\n        } else {\n            setError(\"Title is required\");\n        }\n        setNewTaskTitle(\"\");\n    }\n    let onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        // setError(null);\n        e.key === \"Enter\" && addItem();\n    }\n\n    // let isDisabled = error !== null && true;\n\n    return (\n        <div>\n            <TextField variant=\"outlined\"\n\n                       value={newTaskTitle}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyDownHandler}\n                       error={!!error}\n                // helperText={error}\n                       label={error ? \"Title is required\" : \"Title\"}\n                       style={{color: \"white\"}}\n            />\n            {/*<input*/}\n            {/*    className={`${error && styles.error}`}*/}\n            {/*    onChange={onChangeHandler}*/}\n            {/*    value={newTaskTitle}*/}\n            {/*    onKeyDown={onKeyDownHandler}/>*/}\n\n            <Button\n                variant={\"contained\"}\n                style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth: \"30px\", minHeight: \"30px\"}}\n                onClick={addItem}\n                disabled={error !== null && true}\n            >+</Button>\n\n            {\n                // error && <div className={styles.errorMessage}>{error}</div>\n            }\n        </div>\n    )\n        ;\n};\n\nexport default AddItemForm;","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype PropsType = {\n    title: string;\n    onChangeTitle: (title: string) => void;\n}\n\nfunction TextArea(props: { onBlur: () => void, onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void, onChange: (event: React.ChangeEvent<HTMLInputElement>) => void, autoFocus: boolean, value: string }) {\n    return null;\n}\n\nconst EditableSpanTitle: React.FC<PropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [title, setTitle] = useState(props.title);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.title);\n    }\n\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n    const activateViewMode = () => {\n        debugger\n        setEditMode(false);\n        props.onChangeTitle(title)\n    }\n\n    const onKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        event.key === \"Enter\" && activateViewMode();\n    }\n\n    return (\n        editMode ? <TextField\n                color={\"secondary\"}\n                variant=\"standard\"\n                value={title}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                onKeyDown={onKeyDownHandler}\n                autoFocus\n            />\n            : <span onDoubleClick ={activateEditMode}>{props.title}</span>\n    );\n};\n\nexport default EditableSpanTitle;","import {FilterValuesType} from \"../App\";\nimport {v1} from \"uuid\";\n\ntype ActionType = ChangeTodolistTitleType | RemoveTodolistType |  AddTodolistType | ChangeFilterType;\ntype ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>;\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>;\nexport type AddTodolistType = ReturnType<typeof  addTodolistAC>;\ntype ChangeFilterType = ReturnType<typeof changeFilterAC>;\n\nexport type TodolistType = {\n    id: string;\n    title: string;\n    filter: FilterValuesType\n}\n\n\n\nexport const CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\"\nexport const REMOVE_TODOLISTID = \"REMOVE_TODOLISTID\";\nexport const ADD_TODOLIST = \"ADD_TODOLIST\";\nexport const CHANGE_FILTER = \"CHANGE_FILTER\";\n\nexport const ALL = \"all\";\nexport const ACTIVE = \"active\";\nexport const COMPLETED = \"completed\";\n\n\nexport const todoListId1 = v1();\nexport const todoListId2 = v1();\n\n\nconst initialState: Array<TodolistType>  = [\n    {id: todoListId1, title: \"Learn in Front End\", filter: ALL},\n    {id: todoListId2, title: \"New skills\", filter: ALL}\n]\n\nexport const TodolistsReducer = (state: Array<TodolistType> =  initialState, action: ActionType): Array<TodolistType> => {\n    switch (action.type) {\n        case CHANGE_TODOLIST_TITLE:\n            return state.map(t => t.id === action.payload.todolistId\n                    ? {...t, title: action.payload.title}\n                    : t);\n        case CHANGE_FILTER:\n            return state.map( t => t.id === action.payload.todolistId\n            ? {...t, filter: action.payload.filter}\n            : t\n            );\n        case REMOVE_TODOLISTID:\n            return state.filter(t => t.id !== action.payload.todolistId);\n        case ADD_TODOLIST:\n            return [\n                {id: action.payload.newTodolistId, title: action.payload.title, filter: ALL },\n                ...state\n            ];\n        default:\n            return state;\n    }\n}\n\n\nexport const changeTodolistTitleAC = (todolistId: string,  title: string) => {\n    return {\n        type: CHANGE_TODOLIST_TITLE,\n        payload: {\n            todolistId,\n            title\n        }\n    } as const\n}\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: REMOVE_TODOLISTID,\n        payload: {\n            todolistId\n        }\n    }as const\n}\n\nexport const addTodolistAC = ( title: string) => {\n    return {\n        type: ADD_TODOLIST,\n        payload: {\n            newTodolistId: v1(),\n            title\n        }\n    } as const\n}\n\nexport const changeFilterAC = (todolistId: string, filter: FilterValuesType) => {\n    return {\n        type: CHANGE_FILTER,\n        payload: {\n            todolistId,\n            filter\n        }\n    } as const\n}","import {v1} from \"uuid\";\nimport {\n    ADD_TODOLIST,\n    REMOVE_TODOLISTID,\n    RemoveTodolistType,\n    AddTodolistType,\n    todoListId2,\n    todoListId1\n} from \"./todolists-reducer\";\n\ntype ActionType = RemoveTaskType | ChangeTaskStatusType | ChangeTaskTitleType | AddTaskType |  AddTodolistType  | RemoveTodolistType;\n\ntype RemoveTaskType = ReturnType<typeof removeTaskAC>;\ntype ChangeTaskStatusType = ReturnType<typeof changeTaskStatusAC>;\ntype ChangeTaskTitleType = ReturnType<typeof changeTaskTitleAC>;\ntype AddTaskType = ReturnType<typeof addTaskAC>\n\nexport type TaskType = {\n    id: string;\n    taskTitle: string;\n    isDone: boolean\n}\n\nexport type TasksType = {\n    [key: string]: Array<TaskType>\n}\n\nexport const REMOVE_TASK = \"REMOVE_TASK\";\nexport const CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\";\nexport const CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\";\nexport const ADD_TASK = \"ADD_TASK\";\n\n\nconst initalState: TasksType = {\n    [todoListId1]: [\n        {id: v1(), taskTitle: \"HTML&CSS\", isDone: true},\n        {id: v1(), taskTitle: \"JS\", isDone: true},\n        {id: v1(), taskTitle: \"React\", isDone: true},\n        {id: v1(), taskTitle: \"Storybook\", isDone: false},\n        {id: v1(), taskTitle: \"Git\", isDone: false},\n        {id: v1(), taskTitle: \"Routing\", isDone: false},\n    ],\n    [todoListId2]: [\n        {id: v1(), taskTitle: \"Advanced open water diving\", isDone: true},\n        {id: v1(), taskTitle: \"Ride a car\", isDone: true},\n        {id: v1(), taskTitle: \"Ride a motorbike\", isDone: false},\n    ]\n}\n\nexport const TasksReducer = (state: TasksType = initalState, action: ActionType ): TasksType => {\n    switch (action.type) {\n        case REMOVE_TASK :\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId)\n            };\n        case CHANGE_TASK_STATUS:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\n                    t.id === action.payload.taskId ? {...t, isDone: action.payload.isDone} : t)\n            };\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\n                    t.id === action.payload.taskId ? {...t, taskTitle: action.payload.taskTitle} : t)\n            };\n        case ADD_TASK:\n            let newTask = {id: v1(), taskTitle: action.payload.taskTitle, isDone: false};\n            return {\n                ...state,\n                [action.payload.todolistId]: [newTask, ...state[action.payload.todolistId]],\n            };\n        case ADD_TODOLIST:\n            return {\n                [action.payload.newTodolistId]: [],\n                ...state\n            };\n        case REMOVE_TODOLISTID:\n            // const copy = {...state}\n            // const {[action.payload.id]: remove, ...rest} = copy;\n            //or!!! const {[action.payload.id]: [], ...rest} = copy;\n            // return {...rest}\n            let newState = {...state}\n            delete newState[action.payload.todolistId]\n            return newState\n        default:\n            return state;\n    }\n}\n\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\n    return {\n        type: REMOVE_TASK,\n        payload: {\n            todolistId,\n            taskId\n        }\n    } as const\n}\n\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, isDone: boolean) => {\n    return {\n        type: CHANGE_TASK_STATUS,\n        payload: {\n            todolistId,\n            taskId,\n            isDone\n        }\n    } as const\n}\n\n\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, taskTitle: string) => {\n    return {\n        type: CHANGE_TASK_TITLE,\n        payload: {\n            todolistId,\n            taskId,\n            taskTitle\n        }\n    } as const\n}\n\n\nexport const addTaskAC = (todolistId: string, taskTitle: string) => {\n    return {\n        type: ADD_TASK,\n        payload: {\n            todolistId,\n            taskTitle\n        }\n    } as const\n}\n\n","import React, {ChangeEvent} from \"react\";\nimport {FilterValuesType} from \"../App\";\nimport styles from \"./TodoList.module.css\";\nimport AddItemForm from \"./Input/AddItemForm\";\nimport EditableSpanTitle from \"./EditableSpanTitle\";\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\nimport {DeleteOutline, DeleteOutlined} from \"@mui/icons-material\";\nimport {\n    addTaskAC,\n    changeTaskStatusAC,\n    changeTaskTitleAC,\n    removeTaskAC,\n    TaskType\n} from \"../state/tasks-reducer\";\nimport {\n    ACTIVE,\n    ALL,\n    changeTodolistTitleAC,\n    COMPLETED,\n    removeTodolistAC, changeFilterAC,\n    TodolistType\n} from \"../state/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from \"../state/store\";\n\ntype PropsType = {\n    todolist: TodolistType;\n}\n\n\nconst TodoList = ({todolist}: PropsType) => {\n    const {title, id: todolistId, filter} = todolist;\n    const dispatch = useDispatch();\n    let tasks = useSelector<AppRootState, Array<TaskType>>(state => state.tasks[todolistId]);\n\n    const onFilterClickHandler = (filter: FilterValuesType) => {\n        return () => dispatch(changeFilterAC(todolistId, filter));\n    }\n    const removeTodolistHandler = () => {\n        dispatch(removeTodolistAC(todolistId));\n    }\n\n    const addTask = (title: string) => {\n        dispatch(addTaskAC(todolistId, title));\n    }\n    const onChangeTodolistTitleHandler = (title: string) => {\n        dispatch(changeTodolistTitleAC(todolistId, title));\n        console.log(title);\n    }\n\n    let tasksForToDoList = tasks;\n\n    debugger\n    switch (filter) {\n        case ACTIVE:\n            tasksForToDoList = tasks.filter(t => !t.isDone)\n            break\n        case COMPLETED:\n            tasksForToDoList = tasks.filter(t => t.isDone)\n            break\n    }\n\n\n    let tasksList = tasks.length ?\n        tasksForToDoList.map((t) => {\n            const onRemoveHandler = () => {\n                dispatch(removeTaskAC(todolistId, t.id));\n            };\n\n            const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                dispatch(changeTaskStatusAC(todolistId, t.id, e.currentTarget.checked))\n            }\n            const onChangeTitleHandler = (newTitle: string) => {\n                dispatch(changeTaskTitleAC(todolistId, t.id, newTitle))\n            }\n\n\n            return (\n\n                <div key={t.id} className={`${t.isDone && styles.isDone}`}>\n                    <Checkbox\n                        style={{color: \"#c7f774\"}}\n                        checked={t.isDone}\n                        onChange={onStatusChangeHandler}\n                    />\n                    <EditableSpanTitle title={t.taskTitle} onChangeTitle={onChangeTitleHandler}/>\n                    <IconButton aria-label=\"delete\" onClick={onRemoveHandler}>\n                        <DeleteOutline style={{color: \"#6b7d84\"}} fontSize={\"small\"}/>\n                    </IconButton>\n                </div>\n            )\n        }) :\n        <span>Your task list is empty</span>\n\n\n//JSX\n    return (\n        <div>\n            <h3>\n                <EditableSpanTitle title={title} onChangeTitle={onChangeTodolistTitleHandler}/>\n                <IconButton aria-label=\"delete\" onClick={removeTodolistHandler}>\n                    <DeleteOutlined style={{color: \"#6b7d84\"}}/>\n                </IconButton>\n            </h3>\n            <div>\n                <AddItemForm addItem={addTask}/>\n            </div>\n            <div>\n                {tasksList}\n            </div>\n            <div>\n                <Button\n                    variant={`${filter === ALL ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ALL)}\n                >All</Button>\n                <Button\n                    variant={`${filter === ACTIVE ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(ACTIVE)}\n                    color={\"secondary\"}\n                >Active</Button>\n                <Button\n                    variant={`${filter === COMPLETED ? \"contained\" : \"text\"}`}\n                    onClick={onFilterClickHandler(COMPLETED)}\n                    size={\"small\"}\n                    color={\"success\"}\n                >Completed</Button>\n            </div>\n            <div>\n                {/*<Button title={\"undo\"} onClikCallback={props.setPrevState}/>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList;\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nexport function Header() {\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\"  style={{backgroundColor: \"#66b1d1\"}}>\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}\n\nexport default Header;\n\n\n// import React from \"react\";\n// import AppBar from '@mui/material/AppBar';\n// import Toolbar from '@mui/material/Toolbar';\n// import Typography from '@mui/material/Typography';\n// import IconButton from '@mui/material/IconButton';\n// import MenuIcon from '@mui/icons-material/Menu';\n//\n// type PropsType = {}\n//\n//\n// // https://colors.muz.li/palette/9999ff/66b1d1/78e2dd/c7f774/fff0aa\n// const Header: React.FC = () => {\n//     return (\n//         <div>\n//             <AppBar position=\"static\">\n//                 <Toolbar variant=\"dense\"\n//                          style={{backgroundColor: \"#66b1d1\"}}\n//                 >\n//                     <IconButton edge=\"start\"\n//                                 style={{backgroundColor: \"#66b1d1\"}}\n//                                 aria-label=\"menu\" sx={{ mr: 2 }}>\n//                         <MenuIcon />\n//                     </IconButton>\n//                     <Typography variant=\"h6\"\n//                                 style={{backgroundColor: \"#66b1d1\"}}\n//                                 component=\"div\">\n//                         Todolist\n//                     </Typography>\n//                 </Toolbar>\n//             </AppBar>\n//         </div>\n//     );\n// };\n//\n// export default Header;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport AddItemForm from \"./components/Input/AddItemForm\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Container from \"@mui/material/Container\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {addTodolistAC, TodolistType,} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists);\r\n\r\n    const setPrevState = () => {\r\n        // setTasks(previousState);\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm\r\n                        addItem={addTodolist}\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map((tl: TodolistType) => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"20px\", width: \"300px\"}}>\r\n                                    <TodoList todolist={tl} />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, legacy_createStore} from \"redux\";\nimport {TodolistsReducer} from \"./todolists-reducer\";\nimport {TasksReducer} from \"./tasks-reducer\";\n\n\nexport type AppRootState = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n    todolists: TodolistsReducer,\n    tasks:  TasksReducer\n});\n\nexport const store = legacy_createStore(rootReducer);\n\n\n//@ts-ignore\nwindow.store = store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {createTheme, CssBaseline, ThemeProvider} from \"@mui/material\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#66b1d1\",\r\n        },\r\n        secondary: {\r\n            main: \"#9999ff\",\r\n        },\r\n        success: {\r\n            main: \"#c7f774\",\r\n        },\r\n        mode: \"dark\",\r\n        background: {default: \"#242e41\", paper: \"#2e3b52\"},\r\n    }\r\n})\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </HashRouter>\r\n    ,\r\n    document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"TodoList_errorMessage__3tfYY\",\"error\":\"TodoList_error__2LNBJ\",\"isDone\":\"TodoList_isDone__3nSGs\",\"button\":\"TodoList_button__31WtO\"};"],"sourceRoot":""}